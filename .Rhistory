# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
# tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
# tmp$N[1,14,1]
N_Z_F <- doNAA(F1=0.57, F2=0.02, usedat = dat, Sel); tmp <- N_Z_F
## spawn-src fmsy
par(mar = c(4,4,0,1))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',   yaxt = 'n',  cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,0,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
## TOTAL NS FMSY
par(mar = c(4,4,0,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
layout.matrix <- matrix(c(1:6), ncol = 3, byrow = T)
layout(mat = layout.matrix)
Sel <- matrix(c(dat$dat[Ages+1,'fishery_selectivity',1], dat$dat[Ages+1,'fishery_selectivity',2]),nrow=2,ncol=Nages, byrow = T)
# tmp <- doNAA(F1=0,F2=0, usedat =datlist[[s]], Sel)
N_Z_F <- doNAA(F1=0, F2=0, usedat = dat, Sel); tmp <- N_Z_F
# tmp <- doPR(, FF = c(0,0)) ## defaults, no fishing
par(mar = c(0,4,1.5,0))
## spawn-src F0
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),
xlab = 'Age',
xaxt = 'n', yaxt = 'n',
type = 'l',
cex.main = 1.5,
main = 'Spawned in area 1',
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~0)),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(0,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = 'Spawned in area 2',
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~0)),
ylim = c(0,1),
ylab = 'Numbers-per-recruit',
xaxt = 'n',
yaxt = 'n',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## total Ns F0
par(mar = c(0,4,1.5,0))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = 'Total Numbers',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~0)),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
# tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
# tmp$N[1,14,1]
N_Z_F <- doNAA(F1=0.57, F2=0.02, usedat = dat, Sel); tmp <- N_Z_F
## spawn-src fmsy
par(mar = c(4,4,0,1))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',   yaxt = 'n',  cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,0,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## TOTAL NS FMSY
par(mar = c(4,4,0,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
layout.matrix <- matrix(c(1:6), ncol = 3, byrow = T)
layout(mat = layout.matrix)
Sel <- matrix(c(dat$dat[Ages+1,'fishery_selectivity',1], dat$dat[Ages+1,'fishery_selectivity',2]),nrow=2,ncol=Nages, byrow = T)
# tmp <- doNAA(F1=0,F2=0, usedat =datlist[[s]], Sel)
N_Z_F <- doNAA(F1=0, F2=0, usedat = dat, Sel); tmp <- N_Z_F
# tmp <- doPR(, FF = c(0,0)) ## defaults, no fishing
par(mar = c(0,4,1.5,0))
## spawn-src F0
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),
xlab = 'Age',
xaxt = 'n', yaxt = 'n',
type = 'l',
cex.main = 1.5,
main = 'Spawned in area 1',
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~0)),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(0,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = 'Spawned in area 2',
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~0)),
ylim = c(0,1),
ylab = 'Numbers-per-recruit',
xaxt = 'n',
yaxt = 'n',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## total Ns F0
par(mar = c(0,4,1.5,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = 'Total Numbers',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~0)),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
# tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
# tmp$N[1,14,1]
N_Z_F <- doNAA(F1=0.57, F2=0.02, usedat = dat, Sel); tmp <- N_Z_F
## spawn-src fmsy
par(mar = c(4,4,0,0))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',   yaxt = 'n',  cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,0,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## TOTAL NS FMSY
par(mar = c(4,4,0,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
png(here('figs',paste0(scen[s,1],'-testdoPR-movement-PANEL.png')),
width = 10, height =8, unit = 'in', res = 520)
layout.matrix <- matrix(c(1:6), ncol = 3, byrow = T)
layout(mat = layout.matrix)
Sel <- matrix(c(dat$dat[Ages+1,'fishery_selectivity',1], dat$dat[Ages+1,'fishery_selectivity',2]),nrow=2,ncol=Nages, byrow = T)
# tmp <- doNAA(F1=0,F2=0, usedat =datlist[[s]], Sel)
N_Z_F <- doNAA(F1=0, F2=0, usedat = dat, Sel); tmp <- N_Z_F
# tmp <- doPR(, FF = c(0,0)) ## defaults, no fishing
par(mar = c(0,4,1.5,0))
## spawn-src F0
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),
xlab = 'Age',
xaxt = 'n', yaxt = 'n',
type = 'l',
cex.main = 1.5,
main = 'Spawned in area 1',
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~0)),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(0,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = 'Spawned in area 2',
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~0)),
ylim = c(0,1),
ylab = 'Numbers-per-recruit',
xaxt = 'n',
yaxt = 'n',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## total Ns F0
par(mar = c(0,4,1.5,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = 'Total Numbers',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~0)),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
# tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
# tmp$N[1,14,1]
N_Z_F <- doNAA(F1=0.57, F2=0.02, usedat = dat, Sel); tmp <- N_Z_F
## spawn-src fmsy
par(mar = c(4,4,0,0))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',   yaxt = 'n',  cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,0,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
# main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## TOTAL NS FMSY
par(mar = c(4,4,0,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
# main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'l') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
# text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
dev.off()
# scen <- read.csv(here("inputscen.csv")) ## setup
scen <- read.csv(here("vignette_inputscen.csv")) ## setup
idx =1;  msys <- array(NA,dim = c(2,nrow(scen),2)) ## global x local, scen, 2 areas
for(s in c(12,1,3,6)){
#  strng <- gsub("+","-",scen[s,'SCENARIO_NAME'])
dr <- "C:/Users/mkapur/Dropbox/UW/sptlRP/output/vignette_fish_before_move"
whch <- grep(scen[s,'SCENARIO_NAME'],list.files(dr))
filn <-  list.files(dr, full.names = T)[whch[1]]
load(paste0(filn, "/ss_global.RDATA"))
load(paste0(filn,  "/ss_local.RDATA"))
msys[1,idx,1] <-exp(ss_global$par)[1]
msys[2,idx,1] <-exp(ss_local$par)[1]
msys[1,idx,2] <-exp(ss_global$par)[2]
msys[2,idx,2] <-exp(ss_local$par)[2]
idx = idx+1
}
idx =1;plist=list()
# for(s in 1:nrow(scen)){
for(s in c(12,1,3,6)){
cat(idx,"\n")
SCENARIO = scen[s,'SCENARIO_NAME']
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
steeps <- c(scen[s,'H1'], scen[s,'H2'])
dat <- makeDat(wa = NULL, ## default wa
mort = scen[s,'NATM'],
h = steeps,
input_prop = scen[s,'PROPR'],
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50= c(as.numeric(scen[s,'SLX_A50_A1']),9),
slx_a95= c(as.numeric(scen[s,'SLX_A95_A1']),13),
pStay=pStayt,
qq = c(scen[s,'Q1'],scen[s,'Q2']))
## run isocline at FMSY
dr <- "C:/Users/mkapur/Dropbox/UW/sptlRP/output/vignette_fish_before_move"
whch <- grep(scen[s,'SCENARIO_NAME'],list.files(dr))
filn <-  list.files(dr, full.names = T)[whch[1]]
load(paste0(filn, "/ss_global.RDATA"))
load(paste0(filn,  "/ss_local.RDATA"))
## all combos of FF_area1 + F2MSY
FF.vec = seq(0,0.75,0.05)
cat(exp(ss_global$par),"\n")
cat(exp(ss_local$par),"\n")
FFs_g <- expand.grid(FF.vec,exp(ss_global$par)[2])
FFs_l <- expand.grid(FF.vec,exp(ss_local$par)[2])
surface <- array(NA, dim = c(nrow(FFs_g),7,2),
dimnames = list(c(1:nrow(FFs_g)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
## fill local & global separately
for(i in 1:nrow(FFs_g)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1','global'] <- FFs_g[i,1];  surface[i,'FF_Area2','global'] <- FFs_g[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs_g[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
for(i in 1:nrow(FFs_l)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1','local'] <- FFs_l[i,1];
surface[i,'FF_Area2','local'] <- FFs_l[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs_l[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
} ## end nrow FFs
iso_local <- data.frame(surface[,,'local']) %>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
iso_global <- data.frame(surface[,,'global']) %>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
ggplot(data = iso_local, aes(y = yield)) +
geom_line(aes(x = FF_Area1, linetype = 'LOCAL', color = 'LOCAL'), lwd = 1.1) +
geom_line(data = iso_global, aes(x = FF_Area1, linetype = 'GLOBAL', color = 'GLOBAL'),
lwd = 1.1) +
ggsidekick::theme_sleek(base_size = 15) +
theme(legend.position = 'top')+
geom_vline(aes(xintercept =msys[2,s,1],  lty = 'LOCAL', color = 'LOCAL')) +
geom_vline(aes(xintercept = msys[1,s,1],  lty = 'GLOBAL', color = 'GLOBAL')) +
scale_color_manual(name = "assumption",
values = c('black','blue'),
labels = c('GLOBAL','LOCAL')) +
scale_linetype_manual(name = "assumption",
values = c('solid','dotted'),
labels = c('GLOBAL','LOCAL')) +
scale_x_continuous(limits = c(0,0.7), breaks = seq(0,0.7,0.1)) +
scale_y_continuous(limits = c(0,75), breaks = seq(0,70,10)) +
labs(x =       as.expression(bquote(F~"in"~"area 1,"~F~" in area 2 ="~F[MSY])),
'F in Area 1 (F Area 2 = FMSY Area 2)',
y = 'Yield Total', linetype = "assumption")  +
annotate('text', x = 0.05, y = 70, size = 5, label = toupper(letters[idx]))
ggsave(last_plot(),
height = 6, width = 6, dpi = 520,
file = paste0(filn,"/F1Yield_F2FMSY.png"))
idx = idx +1
}
idx =1;  msys <- array(NA,dim = c(2,nrow(scen),2)) ## global x local, scen, 2 areas
for(s in c(12,1,3,6)){
#  strng <- gsub("+","-",scen[s,'SCENARIO_NAME'])
dr <- "C:/Users/mkapur/Dropbox/UW/sptlRP/output/vignette_fish_before_move"
whch <- grep(scen[s,'SCENARIO_NAME'],list.files(dr))
filn <-  list.files(dr, full.names = T)[whch[1]]
load(paste0(filn, "/ss_global.RDATA"))
load(paste0(filn,  "/ss_local.RDATA"))
msys[1,idx,1] <-exp(ss_global$par)[1]
msys[2,idx,1] <-exp(ss_local$par)[1]
msys[1,idx,2] <-exp(ss_global$par)[2]
msys[2,idx,2] <-exp(ss_local$par)[2]
idx = idx+1
}
idx =1;  msys <- array(NA,dim = c(2,nrow(scen),2)) ## global x local, scen, 2 areas
for(s in c(12,1,3,6)){
#  strng <- gsub("+","-",scen[s,'SCENARIO_NAME'])
dr <- "C:/Users/mkapur/Dropbox/UW/sptlRP/output/vignette_fish_before_move"
whch <- grep(scen[s,'SCENARIO_NAME'],list.files(dr))
filn <-  list.files(dr, full.names = T)[whch[1]]
load(paste0(filn, "/ss_global.RDATA"))
load(paste0(filn,  "/ss_local.RDATA"))
msys[1,idx,1] <-exp(ss_global$par)[1]
msys[2,idx,1] <-exp(ss_local$par)[1]
msys[1,idx,2] <-exp(ss_global$par)[2]
msys[2,idx,2] <-exp(ss_local$par)[2]
idx = idx+1
}
idx =1;plist=list()
# for(s in 1:nrow(scen)){
for(s in c(12,1,3,6)){
cat(idx,"\n")
SCENARIO = scen[s,'SCENARIO_NAME']
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
steeps <- c(scen[s,'H1'], scen[s,'H2'])
dat <- makeDat(wa = NULL, ## default wa
mort = scen[s,'NATM'],
h = steeps,
input_prop = scen[s,'PROPR'],
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50= c(as.numeric(scen[s,'SLX_A50_A1']),9),
slx_a95= c(as.numeric(scen[s,'SLX_A95_A1']),13),
pStay=pStayt,
qq = c(scen[s,'Q1'],scen[s,'Q2']))
## run isocline at FMSY
dr <- "C:/Users/mkapur/Dropbox/UW/sptlRP/output/vignette_fish_before_move"
whch <- grep(scen[s,'SCENARIO_NAME'],list.files(dr))
filn <-  list.files(dr, full.names = T)[whch[1]]
load(paste0(filn, "/ss_global.RDATA"))
load(paste0(filn,  "/ss_local.RDATA"))
## all combos of FF_area1 + F2MSY
FF.vec = seq(0,0.75,0.05)
cat(exp(ss_global$par),"\n")
cat(exp(ss_local$par),"\n")
FFs_g <- expand.grid(FF.vec,exp(ss_global$par)[2])
FFs_l <- expand.grid(FF.vec,exp(ss_local$par)[2])
surface <- array(NA, dim = c(nrow(FFs_g),7,2),
dimnames = list(c(1:nrow(FFs_g)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
## fill local & global separately
for(i in 1:nrow(FFs_g)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1','global'] <- FFs_g[i,1];  surface[i,'FF_Area2','global'] <- FFs_g[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs_g[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
for(i in 1:nrow(FFs_l)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1','local'] <- FFs_l[i,1];
surface[i,'FF_Area2','local'] <- FFs_l[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs_l[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
} ## end nrow FFs
iso_local <- data.frame(surface[,,'local']) %>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
iso_global <- data.frame(surface[,,'global']) %>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
ggplot(data = iso_local, aes(y = yield)) +
geom_line(aes(x = FF_Area1, linetype = 'LOCAL', color = 'LOCAL'), lwd = 1.1) +
geom_line(data = iso_global, aes(x = FF_Area1, linetype = 'GLOBAL', color = 'GLOBAL'),
lwd = 1.1) +
ggsidekick::theme_sleek(base_size = 15) +
theme(legend.position = 'top')+
geom_vline(aes(xintercept =msys[2,idx,1],  lty = 'LOCAL', color = 'LOCAL')) +
geom_vline(aes(xintercept = msys[1,idx,1],  lty = 'GLOBAL', color = 'GLOBAL')) +
scale_color_manual(name = "assumption",
values = c('black','blue'),
labels = c('GLOBAL','LOCAL')) +
scale_linetype_manual(name = "assumption",
values = c('solid','dotted'),
labels = c('GLOBAL','LOCAL')) +
scale_x_continuous(limits = c(0,0.7), breaks = seq(0,0.7,0.1)) +
scale_y_continuous(limits = c(0,75), breaks = seq(0,70,10)) +
labs(x =       as.expression(bquote(F~"in"~"area 1,"~F~" in area 2 ="~F[MSY])),
'F in Area 1 (F Area 2 = FMSY Area 2)',
y = 'Yield Total', linetype = "assumption")  +
annotate('text', x = 0.05, y = 70, size = 5, label = toupper(letters[idx]))
ggsave(last_plot(),
height = 6, width = 6, dpi = 520,
file = paste0(filn,"/F1Yield_F2FMSY.png"))
idx = idx +1
}
