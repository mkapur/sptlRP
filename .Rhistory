annotate('text', x = 1:3, y = 200,
label = paste('Area',1:3),
color = c("grey88","grey33","grey22"), size = 3)+
scale_y_continuous(limits = c(0,500)) +
theme_void()+
theme(legend.position = 'none')
}
Rmisc::multiplot(plotlist = c(barlist,p1list),
layout = lay,
cols = 4)
## applying system-wide F
maxiter = 101
rRef_proposed <- array(NA, dim = c(length(Ftest),3,length(R0_list)))
rRef_proposed_radj <- rRef_proposed_sbpr <- rRef_proposed_SBi <- array(NA, dim = c(maxiter,length(Ftest),narea,length(R0_list)))
rRef_proposed_i <- array(NA, dim = c(length(Ftest),3,narea,length(R0_list)))
for(RR in 1:dim(rRef_proposed)[3]){
rec_level <- R0 <- R0_list[[RR]]
proposed <- data.frame(Fv = NA, Yield = NA, B = NA)
proposed_i <- array(NA, dim = c(length(Ftest),3,narea), dimnames = list(NULL,c('Fv','Yield',"B"))) ## now for each area  ## define virgin biomass by AREA, does not change
B_eq_i <- R_eq_i <- B_eq_i_INIT <- R_eq_i_INIT <- SB_Ri <- Yield_Ri <- matrix(NA, nrow =length(Ftest), ncol = narea)
radj <- array(NA, dim = c(maxiter,length(Ftest),narea)) ## keeping track of convergence
SB0_i <- doNage(Fv = rep(0,narea),
X = X_ija,
rdist = recr_dist,
refR = rec_level)$SB_i
for(v in 1:length(Ftest)){
for(k in 1:maxiter){ ## Loop over steps A & B
if(k == 1){
rdistUse <- recr_dist ## no distribution now; full rec-level in each area
rlevelUse = rec_level ## pre-specified No recruits in area, currently R0
} else{
rdistUse <- recr_dist ## only after computing R_i
rlevelUse =   R_eq_i[v,]
}
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
# call Equ_Spawn_Recr_Fxn for each area to get B_equil and R_equil from SPB/R and SR parms
for(i in 1:narea){ ## will overwrite second time
# calc area-specific SPB/R and Yield/R, using area-specific R
if( k > 1){
rleveltmp = rlevelUse[i]
} else{
rleveltmp = rlevelUse[i]
}
cat(v, k,i,rleveltmp,"\n")
# radj[k,v,i] <- rleveltmp
rRef_proposed_radj[k,v,i,RR] <- rleveltmp
# SB_Ri[v,i] <- prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## on k = 1 will just be rleveltemp
SB_Ri[v,i] <- prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## on k = 1 will just be rleveltemp
if( SB_Ri[v,i] > SB0_i[i]) SB_Ri[v,i] <- SB0_i[i] ## penalty for dividing small numbers
Yield_Ri[v,i] <- prop$Yield_i[i]/(rleveltmp*rdistUse[i])
rRef_proposed_SBi[k,v,i,RR] <-  prop$SB_i[i]
rRef_proposed_sbpr[k,v,i,RR] <- SB_Ri[v,i]
# cat(v, k,i,    prop$SB_i[i],SB_Ri[v,i],"\n")
## Calc area-specific recruits using area-specific SB etc
propEq <- Equil_Spawn_Recr_Fxn(steepness = steep[i], SSB_virgin = SB0_i[i],
Recr_virgin = R0[i], SPR_temp = SB_Ri[v,i])
B_eq_i[v,i] <- propEq$B_equil
R_eq_i[v,i] <- propEq$R_equil ## gets overwritten each iteration
if(k == maxiter){ ## store quantities
proposed_i[v,'Fv',i] <- Ftest[v]
proposed_i[v,'Yield',i] <-  Yield_Ri[v,i]*R_eq_i[v,i]
proposed_i[v,'B',i] <-    SB_Ri[v,i] *R_eq_i[v,i]
} ## end k max
} ## end areas
# cat(v, k,i, Yield_Ri[v,i]*R_eq_i[v,i],"\n")
# if(k == maxiter){ ## store quantities
#   ## storing info, not currently used
#   rick[v,"Fv"] <- Ftest[v]
#   rick[v,"SBeqtotal"] <-   sum(B_eq_i[v,] )
#   ## sum of expected recruits in areas
#   rick[v,"R_SUMEBA"]  <- sum( R_eq_i[v,])
# }
} ## end k:maxiter
## save totals from final iteration
proposed[v,'Fv'] <- Ftest[v]
proposed[v,'Yield'] <-   sum(proposed_i[v,'Yield',])
proposed[v,'B'] <-  sum(proposed_i[v,'B',])
} ## end FV
rRef_proposed[,,RR] <- as.matrix(proposed)
rRef_proposed_i[,,,RR] <- proposed_i
} ## end RR
p1list = barlist=list()
for(i in 1:4){
current <- data.frame(rRef_current[,,i])
names(current) <- c('Fv','Yield','B')
proposed <-  data.frame(rRef_proposed[,,i])
names(proposed) <- c('Fv','Yield','B')
p1list[[i]] <- ggplot(current, aes(x = Fv, y = Yield)) +
geom_line(lwd = 1.1, aes(color = 'current')) +
geom_line(data = proposed, lwd = 1.1,linetype = 'dashed', aes(color = 'proposed')) +
scale_color_manual(values = c('seagreen','goldenrod')) +
labs(x = 'F', y = ifelse(i == 1, 'Yield',""), color = "") +
theme_sleek() +
theme(legend.position = if(i < 4) 'none' else c(0.8,0.8)) #+ ggtitle("high oscillation problem -- conclude on 99th iteration")
barlist[[i]] <- melt(data.frame(R0_list[[i]])) %>%
mutate(Area = 1:3) %>%
ggplot(., aes(x = Area, y = value, fill = factor(Area))) +
geom_histogram(stat = 'identity',
boundary = 0)+
scale_fill_grey()  +
annotate('text', x = 1:3, y = 200,
label = paste('Area',1:3),
color = c("grey88","grey33","grey22"), size = 3)+
scale_y_continuous(limits = c(0,500)) +
theme_void()+
theme(legend.position = 'none')
}
Rmisc::multiplot(plotlist = c(barlist,p1list),
layout = lay,
cols = 4)
plotseq = c(10:15)
par(mfrow = c(4,length(plotseq)),
mar = c(5,5,1.5,1.5))
# plist = list()
for(i in 1:4){
radj <- rRef_proposed_radj[,,,i]
for(j in plotseq){
if(i == 4 & j == max(plotseq)) next()
plot(radj[,j,1], col = 'black',
type = 'l', ylim = c(0,800),
xlab = 'Iteration No.',
ylab =  'R_eq')
text(x = maxiter*0.5, y = 600,
cex = 1.5, label = paste0('F = ',Ftest[j]))
## niter x fv x areas
for(k in 2:narea){
lines(radj[,j,k], col = c('blue','red')[k-1])
}
} ## end j (Fs)
}
plot.new()
legend('center',
col = c('black','blue','red'),
legend = paste('Area',1:3), lty = 1, cex = 1)
plot(rRef_proposed_sbpr[1:100,12,3,1],type = 'l', col = 'red',
ylim = c(0,max(rRef_proposed_sbpr[1:100,12,3,1])))
lines(rRef_proposed_sbpr[1:100,12,2,1],type = 'l', col = 'blue')
lines(rRef_proposed_sbpr[1:100,12,1,1],type = 'l', col = 'black')
dev.off()
plot(rRef_proposed_radj[1:100,12,3,1],type = 'l', col = 'red', ylim = c(0,400))
lines(rRef_proposed_radj[1:100,12,2,1],type = 'l', col = 'blue')
lines(rRef_proposed_radj[1:100,12,1,1],type = 'l', col = 'black')
rRef_proposed_radj[1:100,12,3,1]
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point()
which(rRef_proposed_sbpr[1:100,12,3,1] >100)
rRef_proposed_SBi[,12,3,1][ which(rRef_proposed_sbpr[1:100,12,3,1] >100)]
rRef_proposed_radj[,12,3,1][ which(rRef_proposed_sbpr[1:100,12,3,1] >100)]
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = rRef_proposed_sbpr[1:101,12,3,1]) )
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = rRef_proposed_sbpr[1:101,12,3,1])
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = round(rRef_proposed_sbpr[1:101,12,3,1]) ,2)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
check_overlap = TRUE)
8.3/0.00004
8.3/0.0004
hist((rRef_proposed_sbpr[1:100,12,3,1] )
)
which(rRef_proposed_sbpr[1:100,12,3,1] >100)
gt100 <- which(rRef_proposed_sbpr[1:100,12,3,1] >100)
rRef_proposed_SBi[gt100,12,3,1]
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,2),
round(rRef_proposed_SBi[1:101,12,3,1] ,2))[[1]],
check_overlap = TRUE)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,2),
round(rRef_proposed_SBi[1:101,12,3,1] ,2))[[2]],
check_overlap = TRUE)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[2]],
check_overlap = TRUE)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[3]],
check_overlap = TRUE)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[2]],
check_overlap = TRUE)
min(rRef_proposed_SBi[1:101,12,3,1])
Equil_Spawn_Recr_Fxn(steepness = steep[3], SSB_virgin = SB0_i[3],
Recr_virgin = R0[3], SPR_temp = 8)
# as input Rref gets lower, next rRef gets higher, increasing sbpr
## and vice versa
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point()
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[1]],
check_overlap = TRUE)
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[2]],
check_overlap = TRUE)
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[3]],
check_overlap = TRUE)
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[1]],
check_overlap = TRUE)
which(round(rRef_proposed_sbpr[2:101,12,3,1] ,2) == 0.27)
rRef_proposed_SBi[2:101,12,3,1][
which(round(rRef_proposed_sbpr[2:101,12,3,1] ,2) == 0.27)]
rRef_proposed_radj[1:101,12,3,1][
which(round(rRef_proposed_sbpr[1:101,12,3,1] ,2) == 0.27)]
rlevelUse = rec_level
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
i = 3
rleveltmp = rlevelUse[i]
prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## o
SB_Ri[v,i] <- prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## on k = 1 will just be rleveltemp
Equil_Spawn_Recr_Fxn(steepness = steep[i], SSB_virgin = SB0_i[i],
Recr_virgin = R0[i], SPR_temp = SB_Ri[v,i])
rleveltmp
RR = 1
rec_level <- R0 <- R0_list[[RR]]
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
rleveltmp = rlevelUse[i]
prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## on k
prop$SB_i
rleveltmp
rlevelUse
rec_level <- R0 <- R0_list[[RR]]
rec_level
SB0_i <- doNage(Fv = rep(0,narea),
X = X_ija,
rdist = recr_dist,
refR = rec_level)$SB_i
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
rdistUse <- recr_dist ## only after computing R_i
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
prop$SB_i[i]/(rleveltmp*rdistUse[i]) ## on k =
rleveltmp
rleveltmp = 250
rlevelUse
rec_level
rlevelUse
rlevelUse = rec_level ## pre-specified No recruits in area, currently R0
## get values at present Fv
# In each iteration, calculate the SSB and Yield that
# comes from those recruits, taking movement into account
prop <- doNage( Fv = rep(Ftest[v],narea),
X = X_ija,
rdist = rdistUse,
refR = rlevelUse)
prop$SB_i[i]/(rleveltmp*rdistUse[i])
prop$SB_i[i]
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[1]],
check_overlap = TRUE)
rRef_proposed_radj[1:101,12,3,1][
which(round(rRef_proposed_sbpr[1:101,12,3,1] ,2) == 0.27)]
rleveltmp
## sanity check calcs happened correctly
(rRef_proposed_SBi[1:100,12,3,1]/rRef_proposed_radj[1:100,12,3,1]) ==
rRef_proposed_sbpr[1:100,12,3,1]
## sanity check calcs happened correctly
(rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ==
rRef_proposed_sbpr[1:101,12,3,1]
(rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1])
rRef_proposed_sbpr[1:101,12,3,1]
plot((rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ~
rRef_proposed_sbpr[1:101,12,3,1])
abline(0,1)
plot((rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ~
rRef_proposed_sbpr[1:101,12,3,1], xlim = c(0,1))
plot((rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ~
rRef_proposed_sbpr[1:101,12,3,1], ylim = c(0,1))
abline(0,1)
plot((rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ~
rRef_proposed_sbpr[1:101,12,3,1], ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot((rRef_proposed_SBi[1:101,12,3,1]/rRef_proposed_radj[1:101,12,3,1]) ~
rRef_proposed_sbpr[1:101,12,3,1], ylim = c(0,1), xlim = c(0,1))
abline(0,1, col = 'red')
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[1]],
check_overlap = TRUE)
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = rRef_proposed_sbpr[2:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[3]],
check_overlap = TRUE)
rRef_proposed_radj[1:2,12,3,1]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_radj[2:101,12,3,1]) < 18]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_radj[2:101,12,3,1] < 18)]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_radj[2:101,12,3,1] < 18 & rRef_proposed_radj[2:101,12,3,1] > 17)]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_SBi[2:101,12,3,1] < 18 & rRef_proposed_SBi[2:101,12,3,1] > 17)]
rRef_proposed_radj[1:101,12,3,1][which( rRef_proposed_SBi[1:101,12,3,1] < 18 & rRef_proposed_SBi[1:101,12,3,1] > 17)]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_SBi[1:101,12,3,1] < 18 & rRef_proposed_SBi[1:101,12,3,1] > 17)]
rRef_proposed_radj[2:101,12,3,1][which( rRef_proposed_SBi[2:101,12,3,1] < 18 & rRef_proposed_SBi[2:101,12,3,1] > 17)]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_radj[2:101,12,3,1] < 65 & rRef_proposed_radj[2:101,12,3,1] > 64)]
rRef_proposed_radj[1:100,12,3,1][which( rRef_proposed_radj[2:101,12,3,1] < 13 & rRef_proposed_radj[2:101,12,3,1] > 12)]
rRef_proposed_radj[2:101,12,3,1][which( rRef_proposed_SBi[1:101,12,3,1] < 13 & rRef_proposed_SBi[1:101,12,3,1] > 17)]
rRef_proposed_radj[2:101,12,3,1][which( rRef_proposed_SBi[1:101,12,3,1] < 13 & rRef_proposed_SBi[1:101,12,3,1] > 12)]
rRef_proposed_radj[2:101,12,3,1][which( rRef_proposed_SBi[2:101,12,3,1] < 13 & rRef_proposed_SBi[2:101,12,3,1] > 12)]
rRef_proposed_sbpr[2:101,12,3,1])[[1]]) +
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:100),
rRef_proposed_sbpr[2:101,12,3,1])[[1]])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[3]],
check_overlap = TRUE)
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:100),
rRef_proposed_sbpr[2:101,12,3,1])[[1]])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[3]],
check_overlap = TRUE, color = 'black')
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:100),
rRef_proposed_sbpr[2:101,12,3,1])[[1]])) +
geom_point() + scale_color_grey() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4))[[3]],
check_overlap = TRUE, color = 'black')
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:101),
rRef_proposed_sbpr[2:101,12,3,1])[[2]])) +
geom_point() + scale_color_grey() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4),
paste('iter',1:101))[[4]],
check_overlap = TRUE, color = 'black')
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:101),
rRef_proposed_sbpr[2:101,12,3,1])[[2]])) +
geom_point() + #scale_color_grey() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4),
paste('iter',1:101))[[4]],
check_overlap = TRUE, color = 'black')
# as input Rref gets lower, next rRef gets higher,
## and vice versa
## the highest SBPRs occur at the lowest rRefs bc div by large nums
ggplot(data = NULL, aes(x = rRef_proposed_radj[1:100,12,3,1],
y = rRef_proposed_radj[2:101,12,3,1],
color = list(factor(1:101),
rRef_proposed_sbpr[2:101,12,3,1])[[2]])) +
geom_point() + #scale_color_grey() +
geom_text(label = list(round(rRef_proposed_sbpr[2:101,12,3,1] ,2),
round(rRef_proposed_radj[2:101,12,3,1] ,4),
round(rRef_proposed_SBi[2:101,12,3,1] ,4),
paste('iter',2:101))[[4]],
check_overlap = TRUE, color = 'black')
## small SB and rRef lead to huge SBPR (divide small #s)
ggplot(data = NULL, aes(x = rRef_proposed_SBi[1:101,12,3,1],
y = rRef_proposed_radj[1:101,12,3,1],
color = rRef_proposed_sbpr[1:101,12,3,1])) +
geom_point() +
geom_text(label = list(round(rRef_proposed_sbpr[1:101,12,3,1] ,2),
round(rRef_proposed_radj[1:101,12,3,1] ,4),
round(rRef_proposed_SBi[1:101,12,3,1] ,4))[[2]],
check_overlap = TRUE)
