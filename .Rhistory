maxit = 1000,
ndeps = rep(1e-4,2)))
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2]; ## build this
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
source(here('R','figs.R'))
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(opt_temp)
}
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt_temp <- optim_loop(FFs,i)
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(list("opt_temp"=opt_temp,"tmp0"=tmp0,"tmp"=tmp))
}
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(list("opt_temp"=opt_temp,"tmp0"=tmp0,"tmp"=tmp))
}
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
source(here('R','figs.R'))
## Spatial reference points for next-gen assessment models
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here('R','figs.R'))
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
if(is.na(i)){ ## for uniroot
tmp <- doPR(dat,FF = FFs)
} else{
## for testing
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
}
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(list("opt_temp"=opt_temp,"tmp0"=tmp0,"tmp"=tmp))
}
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
Fv_test = c(0.5,0.5)
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
opt0
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
yields
y1 <- sum(yields)
y1 <- yields$Yield_A1+yields$Yield_A2
opt0 <- optim_loop(FFs=Fv_test+0.001, i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
y2
y1
appx <- (y2-y1)/(0.002) #0.002 is total X delta; we are using system yield
dfx.dxSYS <- function(Fv_test){
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y1 <- yields$Yield_A1+yields$Yield_A2
opt0 <- optim_loop(FFs=Fv_test+0.001, i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
appx <- (y2-y1)/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS_curr, interval = c(0.02,1))[1])
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS, interval = c(0.02,1))[1])
?uniroot
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = min(interval), upper = max(interval))[1])
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = 0, upper =2)[1])
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = 0.001, upper =2)[1])
Fv_test
dfx.dxSYS <- function(Fv_test){
cat(Fv_test,"\n")
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y1 <- yields$Yield_A1+yields$Yield_A2
opt0 <- optim_loop(FFs=Fv_test+0.001, i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
appx <- (y2-y1)/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = 0.001, upper =2)[1])
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = 0.02, upper =2)[1])
Fv_test
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
Fv_test = 0.02
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
FFs = rep(0.02,2)
doPR(dat,FF = FFs)
tmp <- doPR(dat,FF = FFs)
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
opt_temp
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
;
Fv_test
optim_loop(FFs=Fv_test-0.001, i = NA)
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
if(is.na(i)){ ## for uniroot
tmp <- doPR(dat,FF = FFs)
} else{
## for testing
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
}
cat(is.na(tmp),"\n")
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(list("opt_temp"=opt_temp,"tmp0"=tmp0,"tmp"=tmp))
}
opt0 <- optim_loop(FFs=Fv_test-0.001, i = NA)
FFs=Fv_test-0.001
FFs
tmp <- doPR(dat,FF = FFs)
tmp
FFs
# https://stackoverflow.com/questions/32600722/uniroot-in-r-when-there-are-two-unknowns
dfx.dxSYS <- function(Fv_test){
## right now these are sequential (meaning f is equal in each area)
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y1 <- yields$Yield_A1+yields$Yield_A2
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
appx <- (y2-y1)/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
## takes F, performs optimization and returns derived quants at Rbar hat rprop hat
optim_loop <- function(FFs,i){
if(is.na(i)){ ## for uniroot
tmp <- doPR(dat,FF = FFs)
} else{
## for testing
tmp <- doPR(dat,FF = as.numeric(c(FFs[i,])))
}
# cat(is.na(tmp),"\n")
tmp0 <-  doPR(dat,FF = c(0,0) )
## optimize this
opt_temp <- optim(par = c(4,0.6),
SBPR_F = tmp$SBPR,
SBPR_0 = tmp0$SBPR,
lower = c(1E-4,1E-4),
upper = c(NA,1),
method = "L-BFGS-B",
fn = optimFunc, hessian = FALSE,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
return(list("opt_temp"=opt_temp,"tmp0"=tmp0,"tmp"=tmp))
}
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(0.02,1),
lower = 0.02, upper =2)[1])
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(1e-4,1),
lower = 1e-4, upper =2)[1])
# https://stackoverflow.com/questions/32600722/uniroot-in-r-when-there-are-two-unknowns
dfx.dxSYS <- function(Fv_test){
## right now these are sequential (meaning f is equal in each area)
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y1 <- yields$Yield_A1+yields$Yield_A2
cat(y1,'\n')
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
cat(y2,'\n')
appx <- (y2-y1)/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
interval = c(1e-4,1),
lower = 1e-4, upper =2)[1])
yields
y2 <- yields$Yield_A1+yields$Yield_A2
y2
y1
## right now these are sequential (meaning f is equal in each area)
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
Fv_test
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
yields
pt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y1 <- yields$Yield_A1+yields$Yield_A2
cat(y1,'\n')
opt0 <- optim_loop(FFs=rep(Fv_test-0.001,2), i = NA)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
yields <- getYield(passR = opt_temp$par[1], passRprop =  opt_temp$par[2], YPR_F = tmp$YPR)
y2 <- yields$Yield_A1+yields$Yield_A2
cat(y2,'\n')
## now to optimize in 2d space via uniroot
# dfx.dxSYS_curr
as.numeric(uniroot(f = dfx.dxSYS,
# interval = c(1e-4,1),
lower = 1e-4, upper =2)[1])
FFs <- expand.grid(seq(0,2,0.05),seq(0,1,0.05))
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
source(here('R','figs.R'))
out
source(here('R','figs.R'))
iso1 <- out %>%
filter(FF_Area2== 0.5) %>%
select(FF_Area1,Yield_A1) %>%
reshape2::melt(id = c("FF_Area1")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
iso2 <- out %>%
filter(FF_Area1== 0.5) %>%
select(FF_Area2,Yield_A2) %>%
reshape2::melt(id = c("FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
ggplot(iso1, aes(x = FF_Area1, y = yield, color = Area)) +
geom_line(lwd = 1.1) +
geom_line(data = iso2, aes(x = FF_Area2), lwd = 1.1) +
ggsidekick::theme_sleek() +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_color_manual(values = c('grey44','blue'), labels = c('Area 1','Area 2')) +
labs(x = 'F', title = 'Yield Isoclines by Area',
subtitle = 'Alternative Area F = 0.05',
y = 'Yield', color = '')
ggsave(last_plot(),
height = 10, width = 8, dpi = 520,
file = here('figs',paste0(Sys.Date(),"-Isocline_Total.png")))
FSB|FYIELD
FSB/FYIELD
ggsave(last_plot(),
height = 10, width = 8, dpi = 520,
file = here('figs',paste0(Sys.Date(),"-FvsSBandYield_Total.png")))
getYield <- function(passR, passRprop, YPR_F){
## yield in Area 1 is in first row of each array slice
YPR_F_A1 <- sum(YPR_F[1,,1],YPR_F[1,,2])
YPR_F_A2 <- sum(YPR_F[2,,1],YPR_F[2,,2])
Yield_A1 <- ifelse(YPR_F_A1*passR*passRprop>0,YPR_F_A1*passR*passRprop,0)
Yield_A2 <-  ifelse(YPR_F_A2*passR*(1-passRprop)>0,YPR_F_A2*passR*(1-passRprop),0)
return(list('Yield_A1'=Yield_A1,"Yield_A2"=Yield_A2))
}
FFs <- expand.grid(seq(0,1.5,0.05),seq(0,1,0.05))
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
source(here('R','figs.R'))
getYield <- function(passR, passRprop, YPR_F){
## yield in Area 1 is in first row of each array slice
YPR_F_A1 <- sum(YPR_F[1,,1],YPR_F[1,,2])
YPR_F_A2 <- sum(YPR_F[2,,1],YPR_F[2,,2])
Yield_A1 <- YPR_F_A1*passR*passRprop# ifelse(YPR_F_A1*passR*passRprop>0,YPR_F_A1*passR*passRprop,0)
Yield_A2 <-  YPR_F_A2*passR*(1-passRprop)#ifelse(YPR_F_A2*passR*(1-passRprop)>0,YPR_F_A2*passR*(1-passRprop),0)
return(list('Yield_A1'=Yield_A1,"Yield_A2"=Yield_A2))
}
out <- data.frame()
for(i in 1:nrow(FFs)){
out[i,'FF_Area1'] <- FFs[i,1];   out[i,'FF_Area2'] <- FFs[i,2]
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar'] <- opt_temp$par[1];  out[i,'estRprop'] <- opt_temp$par[2];
## derived quants at optimized value
yields <- getYield(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'], YPR_F = tmp$YPR)
out[i,'Yield_A1'] <- yields[1];  out[i,'Yield_A2'] <- yields[2];
sbs <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp$SBPR)
out[i,'SB_A1'] <- sbs[1];  out[i,'SB_A2'] <- sbs[2];
sb0 <- getSB(passR = out[i,'estRbar'], passRprop = out[i,'estRprop'], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1'] <- sb0[1];  out[i,'SB0_A2'] <- sb0[2];
rexp <- getExpR(passR = out[i,'estRbar'], passRprop =   out[i,'estRprop'],SB_F = sbs, SB_0 =sb0)
out[i,'expR_A1'] <- rexp[1];  out[i,'expR_A2'] <- rexp[2];
obsr <- out[i,'estRbar']*c(out[i,'estRprop'],1-out[i,'estRprop'])
out[i,'obsR_A1'] <- obsr[1];  out[i,'obsR_A2'] <- obsr[2];
rm(tmp)
}
source(here('R','figs.R'))
