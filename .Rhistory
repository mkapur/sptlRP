here('figs')
list.files(path = here('figs'),
recursive = TRUE,
patt='.*compare')
list.files(path = here('figs'),
recursive = TRUE,
patt='.*FvsYield_compare')
list.files(path = here('figs'),
recursive = TRUE,
patt='03-09.*FvsYield_compare',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='03-09*FvsYield_compare',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='.*03-09*FvsYield_compare',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='*03-09*FvsYield_compare',
full.names = TRUE)
plots <- lapply(ll <- list.files(path = here('figs'),
recursive = TRUE,
patt='*03-09*FvsYield_compare*',
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
list.files(path = here('figs'),
recursive = TRUE,
patt='*03-09*FvsYield_compare*',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='.*03-09.*FvsYield_compare*',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='*FvsYield_compare',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='03-09&FvsYield_compare',
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt='03-09&FvsYield_compare$',
full.names = TRUE)
glob2rx('03-09*compare')
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx('03-09*compare'),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx('*03-09*compare'),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt="(09&compare).+\\1",
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx("09*.csv")),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx("09*.csv"),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx("09*"),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx("09"),
full.names = TRUE)
list.files(path = here('figs'),
recursive = TRUE,
patt=glob2rx("09*"),
full.names = TRUE
)
list.files(path = here('knitfigs'),
recursive = TRUE,
patt=glob2rx("compare*"),
full.names = TRUE
)
list.files(path = here('knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE)
here('knitfigs')
list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE)
## master plot with compare
library(grid)
library(png)
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
install.packages('png')
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
library(png)
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
library(ggplot2)
library(gridExtra)
ggsave("Plots_Combined.png",width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=2, ncol=1,top=NULL))
list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE)
ggsave("Plots_Combined.png",width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=8, ncol=1,top=NULL))
ggsave("Plots_Combined.png",width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=4, ncol=2,top=NULL))
## master plot with compare
library(grid)
library(png)
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
library(ggplot2)
library(gridExtra)
ggsave("Plots_Combined.png",width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=3, ncol=2,top=NULL))
## master plot with compare
library(grid)
library(png)
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
library(ggplot2)
library(gridExtra)
ggsave("Plots_Combined.png",width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=2, ncol=2,top=NULL))
ggsave(here("figs", paste0(Sys.Date(),"FvsYield_all.png")),width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=2, ncol=2,top=NULL))
ggsave(here("figs", paste0(Sys.Date(),"FvsYield_all.png")),width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=2, ncol=1,top=NULL))
ggsave(here("figs", paste0(Sys.Date(),"FvsYield_all.png")),width=8.5, height=11,
marrangeGrob(grobs = plots, nrow=4, ncol=1,top=NULL))
scen
plots <- lapply(ll <- list.files(path = here('figs','knitfigs'),
recursive = TRUE,
patt="compare",
full.names = TRUE),
function(x){
img <- as.raster(readPNG(x))
rasterGrob(img, interpolate = FALSE)
})
library(ggplot2)
library(gridExtra)
ggsave(here("figs", paste0(Sys.Date(),"FvsYield_all.png")),
width=16, height=12, dpi = 520,
marrangeGrob(grobs = plots, nrow=2, ncol=1,top=NULL))
head(out)
load("C:/Users/mkapur/Dropbox/UW/sptlRP/figs/2021-03-09-h=0.7_0.7-A1 Sink/out.RDATA")
head(out)
tmp$SBPR
## Code to replicate Kapur et al (202X)
## Spatial reference points for next-gen assessment models
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
## matrix of scnearios, including name
## some notes on scenarios:
## slx only are like AAF.
## if name is "move" it uses the A1_SINK setup.
## A2 SINK is simply the reverse of A1 sink
## move light has less lopsitded movement w A1 still as SINK
SCENNAMES <- c('No Movement',
'Symmetrical Movement',
'A1 Sink',
'A2 Sink',
'A1 Low Selex + Symmetrical Movement',
'A1 Low Selex + A1 Sink',
'A1 Hi Selex + A1 Sink')
scen <- matrix(NA, nrow = length(SCENNAMES), ncol =17)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2',
"FMSY_NEW","FMSY_GLOBAL","FPROP_NEW","FPROP_GLOBAL",
"MSY_NEW","MSY_GLOBAL", "SBMSY_NEW","SBMSY_GLOBAL",
"A1DEPL_NEW", "A1DEPL_GLOBAL","A2DEPL_NEW", "A2DEPL_GLOBAL") ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <-SCENNAMES
scen[,'SLX_A50_A1'] <- c(9,9,9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(1,0.5,0.9,0.6,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(1,0.5,0.6,0.9,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
scen <- scen[- which(scen[,"SCENARIO_NAME"] == 'A2 Sink'),]
scen
s = 3
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,0.9999,0.05),seq(0,0.9999,0.05))
out <- makeOut(dat, FFs)
## Generate a surface of expected yields, given new method
out <- array(NA, dim = c(nrow(FFs),17,2),
dimnames = list(c(1:nrow(FFs)),c("FF_Area1","FF_Area2",
"estRbar","estRprop",
"Yield_A1","Yield_A2",
"SB_A1","SB_A2",
"SB0_A1","SB0_A2",
"expR_A1","expR_A2",
"obsR_A1","obsR_A2","tyield",
"ralstonR_A1","ralstonR_A2"),
c('new','old'))) ## each slice is old or new
i = 22
out[i,'FF_Area1',] <- FFs[i,1];   out[i,'FF_Area2',] <- FFs[i,2]
## this is the new method; old method uses global inputs
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
## new method, use optimized Rbar(F) and phi_i----
## these are the values which return recruitments most similar to what
## we'd get using the BH given our spatial dynamic.
out[i,'estRbar',1] <- opt_temp$par[1];  out[i,'estRprop',1] <- opt_temp$par[2];
## old method, use straight inputs
out[i,'estRbar',2] <- R0_global;  out[i,'estRprop',2] <- Rprop_input
## derived quants at global value ("current method")----
yields <- as.numeric(getYield(passR = out[i,'estRbar',2], passRprop =   out[i,'estRprop',2], YPR_F = tmp$YPR))
out[i,'Yield_A1',2] <- yields[1];  out[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out[i,'estRbar',2], passRprop = out[i,'estRprop',2], SBPR_F = tmp$SBPR)
cat(sbs,"\n")
sbs
cat(unlist(sbs),"\n")
sbs <-getSB(passR = out[i,'estRbar',2], passRprop = out[i,'estRprop',2], SBPR_F = tmp$SBPR)
cat(unlist(sbs),"\n")
out[i,'SB_A1',2] <- as.numeric(sbs[1]);  out[i,'SB_A2',2] <- as.numeric(sbs[2]);
sb0 <- getSB(passR = out[i,'estRbar',2], passRprop = out[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1',2] <- as.numeric(sb0[1]);  out[i,'SB0_A2',2] <-as.numeric(sb0[2]);
cat(unlist(sb0),"\n")
req <- (sum(tmp$SBPR)-(sum(tmp0$SBPR)*1-steep)/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global)))
h=steep
req <- (sum(tmp$SBPR)-(sum(tmp0$SBPR)*1-steep)/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global)))
cat("Req w R0global", req,"\n")
cat("Req x SBPReq x prop,1-prop ", req*sum(sbs)*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
cat("Req x SBPReq x prop,1-prop ", req*sum(tmp$SBPR)*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
req
sum(tmp$SBPR)
tmp$SBPR
(sum(tmp0$SBPR)*1-steep)/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global))
alpha = sum(tmp0$SBPR)*(1-mean(h))/(4*h)
beta = (5*mean(h)-1)/(4*mean(h)*R0_global)
req <- (sum(tmp$SBPR) - alpha)/(beta*sum(tmp$SBPR))
# (sum(tmp$SBPR)-(sum(tmp0$SBPR)*(1-steep))/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global)))
cat("Req w R0global", req,"\n")
alpha
alpha = sum(tmp0$SBPR)*(1-mean(h))/(4*mean(h))
alpha
beta = (5*mean(h)-1)/(4*mean(h)*R0_global)
beta
req <- (sum(tmp$SBPR) - alpha)/(beta*sum(tmp$SBPR))
req
# (sum(tmp$SBPR)-(sum(tmp0$SBPR)*(1-steep))/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global)))
cat("Req w R0global", req,"\n")
cat("Req x SBPReq x prop,1-prop ", req*sum(tmp$SBPR)*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
out[i,'estRprop',2]
cat("Req x SBPReq x prop,1-prop ", req*sum(tmp$SBPR)*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
## bev holt using passed parameters
rexp <- as.numeric(getExpR(SB_F = data.frame(sbs), SB_0 = data.frame(sb0), meth = 2)) ## one value, global rec
out[i,'expR_A1',2] <- rexp*out[i,'estRprop',2];  out[i,'expR_A2',2] <- rexp*(1-out[i,'estRprop',2]);
cat("rexp x prop", rexp*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
# (sum(tmp$SBPR)-(sum(tmp0$SBPR)*(1-steep))/(sum(tmp$SBPR)*(4*mean(h))/(5*mean(h)-1)/(4*mean(h)*R0_global)))
cat("Req w R0global", req,"\n")
cat("Req x prop,1-prop ", req*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
cat("rexp x prop", rexp*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
cat("Req x prop,1-prop ", req*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
rexp
req
sbs
sb0
tmp0$SBPR
sb0
tmp0$SBPR
sum(tmp0$SBPR)
cat("rexp x prop", rexp*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
cat("Req x prop,1-prop ", req*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
cat("Req x SBPReq x prop,1-prop ", req*sum(tmp$SBPR)*c( out[i,'estRprop',2],1-out[i,'estRprop',2]),"\n")
sum(tmp$SBPR)
req*sum(tmp$SBPR)
getSB(passR =req, passRprop = out[i,'estRprop',2], SBPR_F = tmp$SBPR)
cat(unlist(sbs),"\n")
source(here("R","fnxs.R"))
out <- makeOut(dat, FFs)
source('C:/Users/mkapur/Dropbox/UW/sptlRP/R/fnxs.R')
out <- makeOut(dat, FFs)
head(out)
source(here("R","fnxs.R"))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
## save the max to master table
scen[s,'FMSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'FMSY','new']
scen[s,'FPROP_NEW'] <- out2[which.max(out2[,'tyield','new']),'Fprop','new']
scen[s,'MSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'tyield','new']
scen[s,'SBMSY_NEW'] <- sum(out2[which.max(out2[,'tyield','new']),"SB_A1",'new'],
out2[which.max(out2[,'tyield','new']),"SB_A2",'new'])
scen[s,'A1DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A1",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A1",'new']
scen[s,'A2DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A2",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A2",'new']
scen[s,'FMSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'FMSY','old']
scen[s,'FPROP_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'Fprop','old']
scen[s,'MSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'tyield','old']
scen[s,'SBMSY_GLOBAL'] <- sum(out2[which.max(out2[,'tyield','old']),"SB_A1",'old'],
out2[which.max(out2[,'tyield','old']),"SB_A2",'old'])
scen[s,'A1DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A1",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A1",'old']
scen[s,'A2DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A2",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A2",'old']
scen
## save stuff; looks to global SCENARIO for filename
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
## matrix of scnearios, including name
## some notes on scenarios:
## slx only are like AAF.
## if name is "move" it uses the A1_SINK setup.
## A2 SINK is simply the reverse of A1 sink
## move light has less lopsitded movement w A1 still as SINK
SCENNAMES <- c('No Movement',
'Symmetrical Movement',
'A1 Sink',
'A2 Sink',
'A1 Low Selex + Symmetrical Movement',
'A1 Low Selex + A1 Sink',
'A1 Hi Selex + A1 Sink')
scen <- matrix(NA, nrow = length(SCENNAMES), ncol =17)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2',
"FMSY_NEW","FMSY_GLOBAL","FPROP_NEW","FPROP_GLOBAL",
"MSY_NEW","MSY_GLOBAL", "SBMSY_NEW","SBMSY_GLOBAL",
"A1DEPL_NEW", "A1DEPL_GLOBAL","A2DEPL_NEW", "A2DEPL_GLOBAL") ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <-SCENNAMES
scen[,'SLX_A50_A1'] <- c(9,9,9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(1,0.5,0.9,0.6,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(1,0.5,0.6,0.9,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
scen <- scen[- which(scen[,"SCENARIO_NAME"] == 'A2 Sink'),]
## build datasets to spec (will autosave figure)
for(s in 1:nrow(scen)){
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,0.9999,0.05),seq(0,0.9999,0.05))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
## save the max to master table
scen[s,'FMSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'FMSY','new']
scen[s,'FPROP_NEW'] <- out2[which.max(out2[,'tyield','new']),'Fprop','new']
scen[s,'MSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'tyield','new']
scen[s,'SBMSY_NEW'] <- sum(out2[which.max(out2[,'tyield','new']),"SB_A1",'new'],
out2[which.max(out2[,'tyield','new']),"SB_A2",'new'])
scen[s,'A1DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A1",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A1",'new']
scen[s,'A2DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A2",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A2",'new']
scen[s,'FMSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'FMSY','old']
scen[s,'FPROP_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'Fprop','old']
scen[s,'MSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'tyield','old']
scen[s,'SBMSY_GLOBAL'] <- sum(out2[which.max(out2[,'tyield','old']),"SB_A1",'old'],
out2[which.max(out2[,'tyield','old']),"SB_A2",'old'])
scen[s,'A1DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A1",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A1",'old']
scen[s,'A2DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A2",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A2",'old']
## save stuff; looks to global SCENARIO for filename
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
rm(out2);rm(out);rm(propmsytemp);rm(dat)
}
steep = c(0.7,0.7)
source(here("R","fnxs.R"))
## build datasets to spec (will autosave figure)
for(s in 1:nrow(scen)){
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,0.9999,0.05),seq(0,0.9999,0.05))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
## save the max to master table
scen[s,'FMSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'FMSY','new']
scen[s,'FPROP_NEW'] <- out2[which.max(out2[,'tyield','new']),'Fprop','new']
scen[s,'MSY_NEW'] <- out2[which.max(out2[,'tyield','new']),'tyield','new']
scen[s,'SBMSY_NEW'] <- sum(out2[which.max(out2[,'tyield','new']),"SB_A1",'new'],
out2[which.max(out2[,'tyield','new']),"SB_A2",'new'])
scen[s,'A1DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A1",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A1",'new']
scen[s,'A2DEPL_NEW'] <- out2[which.max(out2[,'tyield','new']),"SB_A2",'new']/
out2[which.max(out2[,'tyield','new']),"SB0_A2",'new']
scen[s,'FMSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'FMSY','old']
scen[s,'FPROP_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'Fprop','old']
scen[s,'MSY_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),'tyield','old']
scen[s,'SBMSY_GLOBAL'] <- sum(out2[which.max(out2[,'tyield','old']),"SB_A1",'old'],
out2[which.max(out2[,'tyield','old']),"SB_A2",'old'])
scen[s,'A1DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A1",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A1",'old']
scen[s,'A2DEPL_GLOBAL'] <- out2[which.max(out2[,'tyield','old']),"SB_A2",'old']/
out2[which.max(out2[,'tyield','old']),"SB0_A2",'old']
## save stuff; looks to global SCENARIO for filename
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
rm(out2);rm(out);rm(propmsytemp);rm(dat)
}
## master method comparison
scen2 <- scen[,-c(2:5)] %>%
data.frame() %>%
melt(id = c("SCENARIO_NAME")) %>%
mutate(value = as.numeric(value),
SRC =
ifelse(is.na(stringr::word(variable,3,sep = "_")),
stringr::word(variable,2,sep = "_"),
stringr::word(variable,3,sep = "_")),
variable = stringr::word(variable,1,sep = "_")) %>%
group_by(SCENARIO_NAME, variable) %>%
summarise(normVal = value/sum(value), SRC) %>%
mutate(SCENf = factor(SCENARIO_NAME, levels = SCENNAMES),
SRC = recode(SRC,GLOBAL = 'SS (global)',
NEW = 'Proposed'))
ggplot(scen2, aes(x = variable, y = normVal, fill = SRC)) +
geom_bar(position = 'dodge', stat = 'identity') +
ggsidekick::theme_sleek() +
scale_fill_manual(values = c('dodgerblue3','grey66'))+
labs(x ="", y = "normalized value", fill = '')+
facet_wrap(~SCENf)
ggsave(last_plot(), width = 10, height = 8, dpi= 520,
file= here("figs", paste0(Sys.Date(),"-MasterCompare.png")))
