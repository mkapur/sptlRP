for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:5){
if(k == 1){
R_use_prop = R_use_SS = R_init
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("RIN" , FFs[II],k,   R_use_prop,R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop,
SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,5))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
legend('topright', legend = c('No SRR','SRR by Area (proposed method)', 'Global SRR'),
col = c('black','red', 'blue'), lty = 1)
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("RIN" , FFs[II],k,   R_use_prop,R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop,
SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,5))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
legend('topright', legend = c('No SRR','SRR by Area (proposed method)', 'Global SRR'),
col = c('black','red', 'blue'), lty = 1)
# Spawn0 <- sum(FindEqn(FF = 0, R0_i = R_init)$Neqn[c(3,6)]) ## unfished spawning biomass
Spawn0_byage <- FindEqn(FF = 0, R0_i = R_init, R_use = R_init, finding_sb0 = TRUE)$Neqn*maturity_vector
Spawn0 <- c(sum(Spawn0_byage[1:3]),sum(Spawn0_byage[4:6]))## unfished spawning biomass by area
# Part 1 (yield vs F)
FFs <- seq(from=0,to=2,by=0.01)
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("Ruse" , FFs[II],k,   R_use_prop, R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
# cat("Ruse" , FFs[II],k,   R_use_prop, R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("Ruse" , FFs[II],k,   R_use_prop, R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
R_init <-  rep(1000,Narea) #matrix(1,0,0,1,0,0)
# Spawn0 <- sum(FindEqn(FF = 0, R0_i = R_init)$Neqn[c(3,6)]) ## unfished spawning biomass
Spawn0_byage <- FindEqn(FF = 0, R0_i = R_init, R_use = R_init, finding_sb0 = TRUE)$Neqn*maturity_vector
Spawn0 <- c(sum(Spawn0_byage[1:3]),sum(Spawn0_byage[4:6]))## unfished spawning biomass by area
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# Part 1 (yield vs F)
FFs <- seq(from=0,to=2,by=0.01)
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,5))
# Part 1 (yield vs F)
FFs <- seq(from=0,to=0.2,by=0.01)
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# Part 1 (yield vs F)
FFs <- seq(from=0,to=0.05,by=0.01)
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:5){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,5))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
legend('topright', legend = c('No SRR','SRR by Area (proposed method)', 'Global SRR'),
col = c('black','red', 'blue'), lty = 1)
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,50))
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,1500))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
R_init <-  rep(1,Narea) #matrix(1,0,0,1,0,0)
# Spawn0 <- sum(FindEqn(FF = 0, R0_i = R_init)$Neqn[c(3,6)]) ## unfished spawning biomass
Spawn0_byage <- FindEqn(FF = 0, R0_i = R_init, R_use = R_init, finding_sb0 = TRUE)$Neqn*maturity_vector
Spawn0 <- c(sum(Spawn0_byage[1:3]),sum(Spawn0_byage[4:6]))## unfished spawning biomass by area
# Part 1 (yield vs F)
FFs <- seq(from=0,to=0.05,by=0.01)
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
# =================================================================================
maturity_vector = c(0,0.5,1,0,0.5,1)
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:5){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,5))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
# Part 1 (yield vs F)
FFs <- seq(from=0,to=1,by=0.01)
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,2))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:5){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
legend('topright', legend = c('No SRR','SRR by Area (proposed method)', 'Global SRR'),
col = c('black','red', 'blue'), lty = 1)
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new#+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,2))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
# Part 1 (yield vs F)
FFs <- seq(from=0,to=1,by=0.01)
Yields <- SSYields <-  OGYields <- rep(0,length(FFs))
Spawn <- SSSpawn <- OGSpawn <- rep(0,length(FFs))
# Rused <- matrix(NA, length(FFs), Narea)
Rused <- array(NA, dim = c(length(FFs), Narea, 101))
for (II in 1:length(FFs)){
OGPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_init) ## equilbrium numbers given F
OGYields[II] <- OGPrj$Catch ## yield at F
OGSpawn[II] <- sum(OGPrj$Neqn* maturity_vector) ## expected N spawners at F
for(k in 1:2){
if(k == 1){
R_use_prop = R_use_SS = R_init ## start all off at the same values
} else if(k > 1){
R_use_prop <- ModelPrj$R_new+R_init #ModelPrj$R_new ## use last iteration
# cat(k,R_use_prop,"\n")
R_use_SS <- SSPrj$R_global #ModelPrj$R_new ## use last iteration
}
ModelPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_prop) ## equilbrium numbers given F
Yields[II] <- ModelPrj$Catch ## yield at F
Spawn[II] <- sum(ModelPrj$Neqn * maturity_vector) ## expected N spawners at F
# Rused[II,,k] <- R_use
# Yields2[II] <- ModelPrj$Yield
SSPrj <- FindEqn(FFs[II], R0_i = R_init, R_use = R_use_SS) ## equilbrium numbers given F
SSYields[II] <- SSPrj$Catch ## yield at F
SSSpawn[II] <- sum(ModelPrj$Neqn * maturity_vector)  ## expected N spawners at F
cat("FF ", FFs[II]," k ", k, " Ruse prop ",  R_use_prop, " Ruse ss ",R_use_SS, "\n")
# cat(FFs[II],k, ModelPrj$Neqn,"\t",   SSPrj$Neqn ,"\n")
# cat("SPAWN" , FFs[II],k,     Spawn[II],      SSSpawn[II] , "\n")
# cat("SBPR" ,FFs[II],k,     Spawn[II]/R_use_prop, SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, Spawn[II]/R_use_prop,   SSSpawn[II]/R_use_SS, "\n")
# cat(FFs[II],k, SSPrj$R_global, ModelPrj$R_new, "\n")
} ## end iters
} ## end Fs
# par(mfrow=c(2,1),oma=c(1,1,1,1))
plot(FFs,Yields,xlab="Fishing effort",ylab="Yield",type="l",lty=1,
col  = 'red', ylim = c(0,2))
lines(FFs,OGYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1)
lines(FFs,SSYields,xlab="Fishing effort",ylab="Yield",type="l",lty=1, col = 'blue')
rm(list = ls())
runif(100,0,100)
nla <- runif(100,0,100)
pes = runif(100,0,1)
nla*log(pes)
pes
log(0.22)
log(0.99)
10*log(0.22)
1*log(0.99)
1000*log(0.01)
1000*log(0.99)
exp(-0.2)
XIJ <- matrix(NA, nrow = narea, ncol = narea)
XIJ[1,1] <- 0.9 ## from one, to one
XIJ[1,2] <- 1-XIJ[1,1]
XIJ[2,1] <- 0.1 ## from one, to one
XIJ[2,2] <- 1-XIJ[1,1]
## start values
R0_input = 4
h <- 0.75 ## will become parameter
prop_RA1 <- 0.65 ## will become parameter; proportion recruits assigned to A1
narea <- 2
nage <- 3
mort <- exp(-0.2) ## this is why AEP used 0.8
## movement; not age-specific for now
XIJ <- matrix(NA, nrow = narea, ncol = narea)
XIJ[1,1] <- 0.9 ## from one, to one
XIJ[1,2] <- 1-XIJ[1,1]
XIJ[2,1] <- 0.1 ## from one, to one
XIJ[2,2] <- 1-XIJ[1,1]
## a matrix which tracks the
XIJ
XIJ[1,1] <- 0.9 ## from one, to one
XIJ[1,2] <- 1-XIJ[1,1]
XIJ[2,1] <- 0.1 ## from one, to one
XIJ[2,2] <- 1-XIJ[2,1]
XIJ
2580*2*12
