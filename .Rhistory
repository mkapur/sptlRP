main = as.expression(bquote(Total~"Numbers,"~F~"="~0)),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'p') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
tmp$N[1,14,1]
## spawn-src fmsy
par(mar = c(4,4,1.5,1))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',     cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## TOTAL NS FMSY
par(mar = c(4,4,1.5,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'p') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## AEP IDEA - use with src-sink only
doNAA2 <- function(F1,F2, usedat, Sel){
M <- usedat$M
h <- usedat$h
Q = c(0,0.4)
# Q=NULL
# Q[1] <- 1-max(usedat$dat[,2,1])
# Q[2] <- 1-max(usedat$dat[,2,2])
## run area-specific NAA treating all movement as mortality
Z<- matrix(0,nrow=2,ncol=Nages)
for (Iage in 1:Nages) Z[1,Iage] <- M+Sel[1,Iage]*F1
for (Iage in 1:Nages) Z[2,Iage] <- M+Sel[2,Iage]*F2
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
## survive and move at once
for(slice in 1:narea){
for(age in 2:Nages){
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
cat(term2,"\n")
#   pLeave = pLeave + (1-usedat$dat[age,"proportion_stay",area]) ##  leaving for elsewhere
#   NCome = NCome +(1-usedat$dat[age,"proportion_stay",jarea])*
#     N[jarea,age-1,slice]*exp(-Z[jarea, age-1]) ## mortality in other area
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
# N[area,age,slice] <- (1-pLeave)*N[area,age-1,slice]*exp(-Z[area, age-1]) + NCome
# N[area,age,slice] <- N[area,age-1,slice]*exp(-Z[area, age-1])  ## comment out pleave ncome
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
# plot(N)
return(list('N' = N,'Z' = Z))
}
layout.matrix <- matrix(c(1:6), ncol = 3, byrow = T)
layout(mat = layout.matrix)
Sel <- matrix(c(dat$dat[Ages+1,'fishery_selectivity',1], dat$dat[Ages+1,'fishery_selectivity',2]),nrow=2,ncol=Nages, byrow = T)
tmp <- doNAA2(F1=0,F2=0, usedat =datlist[[s]], Sel)
# N_Z_F <- doNAA(F1, F2, usedat = dat, Sel)
# tmp <- doPR(, FF = c(0,0)) ## defaults, no fishing
par(mar = c(0,4,1.5,1))
## spawn-src F0
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),
xlab = 'Age',
xaxt = 'n',
type = 'l',
cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~0)),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(0,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~0)),
ylim = c(0,1),
ylab = 'Numbers-per-recruit',
xaxt = 'n',
yaxt = 'n',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## total Ns F0
par(mar = c(0,4,1.5,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = as.expression(bquote(Total~"Numbers,"~F~"="~0)),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'p') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# FFvec <- c(scen[s,'FMSY_LOCAL_A1'],scen[s,'FMSY_LOCAL_A2'])
tmp <- doNAA2(F1=10,F2=10, usedat =datlist[[s]], Sel)
tmp$N[1,14,1]
## spawn-src fmsy
par(mar = c(4,4,1.5,1))
plot(tmp$N[1,,1], lwd = 2,
ylim = c(0,1),   xlab = 'Age',type = 'l',     cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a1,"~F~"="~F[MSY])),
ylab = 'Numbers-per-recruit' );
lines(tmp$N[2,,1], lwd = 2, col = 'blue') ## should look reasonable
axis(side = 2, at = seq(0,1,0.2), labels =seq(0,1,0.2) )
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
par(mar = c(4,0,1.5,1))
plot(tmp$N[1,,2],type = 'l',
cex.main = 1.5,
main = as.expression(bquote(Spawned~"in"~"a2,"~F~"="~F[MSY])),
ylim = c(0,1),
yaxt = 'n',
ylab = 'Numbers-per-recruit',
xlab = 'Age',
lwd = 2,  )
lines(tmp$N[2,,2],lwd = 2, col = 'blue') ## should look reasonable
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
## TOTAL NS FMSY
par(mar = c(4,4,1.5,1))
plot(rowSums(tmp$N[1,,]),type = 'l',
main = as.expression(bquote(Total~"Numbers,"~F~"="~F[MSY])),
ylim = c(0,1),
cex.main = 1.5,
ylab = 'Numbers-at-Age',
# xaxt = 'n',
lwd = 2,  )
lines(rowSums(tmp$N[2,,]),lwd = 2, col = 'blue', type = 'p') ## should look reasonable
legend('topright',lwd = 2, legend = c('Present in a2', 'Present in a1'), col = rev(c('black','blue')))
text(x = 50, y = 0.7, label = SCENNAMES[s], cex = 1.5)
# #* build surface ----
FMAX <- scen[s,'FMAX']
# FF.vec = seq(0,FMAX,0.05)
FF.vec = seq(0,1000,50)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
## AEP IDEA - use with src-sink only
doNAA2 <- function(F1,F2, usedat, Sel){
M <- usedat$M
h <- usedat$h
Q = c(0,0.4)
# Q=NULL
# Q[1] <- 1-max(usedat$dat[,2,1])
# Q[2] <- 1-max(usedat$dat[,2,2])
## run area-specific NAA treating all movement as mortality
Z<- matrix(0,nrow=2,ncol=Nages)
for (Iage in 1:Nages) Z[1,Iage] <- M+Sel[1,Iage]*F1
for (Iage in 1:Nages) Z[2,Iage] <- M+Sel[2,Iage]*F2
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
## survive and move at once
for(slice in 1:narea){
for(age in 2:Nages){
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
# cat(term2,"\n")
#   pLeave = pLeave + (1-usedat$dat[age,"proportion_stay",area]) ##  leaving for elsewhere
#   NCome = NCome +(1-usedat$dat[age,"proportion_stay",jarea])*
#     N[jarea,age-1,slice]*exp(-Z[jarea, age-1]) ## mortality in other area
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
# N[area,age,slice] <- (1-pLeave)*N[area,age-1,slice]*exp(-Z[area, age-1]) + NCome
# N[area,age,slice] <- N[area,age-1,slice]*exp(-Z[area, age-1])  ## comment out pleave ncome
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
# plot(N)
return(list('N' = N,'Z' = Z))
}
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
# FF.vec = seq(0,FMAX,0.05)
FF.vec = seq(0,100,1)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
#
# #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
# FF.vec = seq(0,FMAX,0.05)
FF.vec = seq(0,100,10)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
#
# #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
# FF.vec = seq(0,FMAX,0.05)
FF.vec = seq(0,10,1)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
#
# #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
data.frame(surface[,,'local']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
# FF.vec = seq(0,FMAX,0.05)
FF.vec = seq(0,2,0.25)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
## AEP IDEA - use with src-sink only
doNAA2 <- function(F1,F2, usedat, Sel){
M <- usedat$M
h <- usedat$h
Q = c(0,0.4)
# Q=NULL
# Q[1] <- 1-max(usedat$dat[,2,1])
# Q[2] <- 1-max(usedat$dat[,2,2])
## run area-specific NAA treating all movement as mortality
Z<- matrix(0,nrow=2,ncol=Nages)
for (Iage in 1:Nages) Z[1,Iage] <- M+Sel[1,Iage]*F1
for (Iage in 1:Nages) Z[2,Iage] <- M+Sel[2,Iage]*F2
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
## survive and move at once
for(slice in 1:narea){
for(age in 2:Nages){
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
# cat(term2,"\n")
#   pLeave = pLeave + (1-usedat$dat[age,"proportion_stay",area]) ##  leaving for elsewhere
#   NCome = NCome +(1-usedat$dat[age,"proportion_stay",jarea])*
#     N[jarea,age-1,slice]*exp(-Z[jarea, age-1]) ## mortality in other area
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
# N[area,age,slice] <- (1-pLeave)*N[area,age-1,slice]*exp(-Z[area, age-1]) + NCome
# N[area,age,slice] <- N[area,age-1,slice]*exp(-Z[area, age-1])  ## comment out pleave ncome
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
# plot(N)
return(list('N' = N,'Z' = Z))
}
#
# #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
data.frame(surface[,,'local']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c()
#* find MSY ----
ss_global <- optim(par = log(c(0.47,0.47)),
dat= dat,
assume = 'GLOBAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
ss_global
cat( round(exp(ss_global$par),2),"\n")
ss_local <- optim(par = start,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 100000,
ndeps = rep(1e-4,2)))
start <-  if(s != 9) log(c(0.05,0.05)) else(ss_global$par)
ss_local <- optim(par = start,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 100000,
ndeps = rep(1e-4,2)))
cat( round(exp(ss_local$par),2),"\n")
49+74
