x = 0.8,
y = 0.85,
size = 3,
color = 'purple',
label = as.expression(bquote(MSY[Optim]~
"="~.(round(out2_new[which.max(out2_new[,'tyield']),
'tyield']))))) +
annotate('text',
x = 0.8,
y = 0.8,
size = 3,
color ='purple',
label = as.expression(bquote(F[MSY_Optim]~"="~.
(round(out2_new[which.max(out2_new$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
new
out_use <- data.frame(out[,,'old'])
global <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'cividis') +
## add the locations of FMSY from global method
geom_point(data = out2_global, aes(x = FF_Area1, y = FF_Area2),fill = NA,
color = 'navy', size = 2, alpha = 0.3) +
geom_point(data = out2_global, aes(x = out2_global[which.max(out2_global[,'tyield']),'FF_Area1'],
y = out2_global[which.max(out2_global[,'tyield']),'FF_Area2']),
fill = NA, color = 'navy', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.12,
size = 3,
color ='navy',
label = as.expression(bquote(MSY[Global]~
"="~.(round(out2_global[which.max(out2_global[,'tyield']),
'tyield']))))) +
annotate('text',
x =0.8,
y = 0.15,
size = 3,
color ='navy',
label = as.expression(bquote(F[MSY_Global]~"="~.
(round(out2_global[which.max(out2_global$tyield),'FMSY']))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
global
global <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0), limits = c(0,1)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1)) +
scale_fill_viridis_c(option = 'cividis') +
## add the locations of FMSY from global method
geom_point(data = out2_global, aes(x = FF_Area1, y = FF_Area2),fill = NA,
color = 'navy', size = 2, alpha = 0.3) +
geom_point(data = out2_global, aes(x = out2_global[which.max(out2_global[,'tyield']),'FF_Area1'],
y = out2_global[which.max(out2_global[,'tyield']),'FF_Area2']),
fill = NA, color = 'navy', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.85,
size = 3,
color ='navy',
label = as.expression(bquote(MSY[Global]~
"="~.(round(out2_global[which.max(out2_global[,'tyield']),
'tyield']))))) +
annotate('text',
x =0.8,
y = 0.8,
size = 3,
color ='navy',
label = as.expression(bquote(F[MSY_Global]~"="~.
(round(out2_global[which.max(out2_global$tyield),'FMSY']))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
global
global <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0), limits = c(0,1)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1)) +
scale_fill_viridis_c(option = 'cividis') +
## add the locations of FMSY from global method
geom_point(data = out2_global, aes(x = FF_Area1, y = FF_Area2),fill = NA,
color = 'navy', size = 2, alpha = 0.3) +
geom_point(data = out2_global, aes(x = out2_global[which.max(out2_global[,'tyield']),'FF_Area1'],
y = out2_global[which.max(out2_global[,'tyield']),'FF_Area2']),
fill = NA, color = 'gold', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.85,
size = 3,
color ='gold',
label = as.expression(bquote(MSY[Global]~
"="~.(round(out2_global[which.max(out2_global[,'tyield']),
'tyield']))))) +
annotate('text',
x =0.8,
y = 0.8,
size = 3,
color ='gold',
label = as.expression(bquote(F[MSY_Global]~"="~.
(round(out2_global[which.max(out2_global$tyield),'FMSY']))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
global
out2_global
# out2_new[out2_new < 0] <- 0
out2_global <- data.frame(out2[,,'old'])
out2_global
out2_new <- data.frame(out2[,,'new'])
# out2_new[out2_new < 0] <- 0
out2_global <- data.frame(out2[,,'old'])
# out2_global[out2_global < 0] <- 0
out_use <- data.frame(out[,,'new'])
outold <- data.frame(out[,,'old'])
# out_use[out_use < 0] <- 0
out2_global[which.max(out2_global[,'tyield'])
out2_global[which.max(out2_global[,'tyield'])
out2_global[which.max(out2_global$tyield),'FMSY']
round(out2_global[which.max(out2_global$tyield),'FMSY'])
round(out2_global[which.max(out2_global$tyield),'FMSY'],2)
global <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0), limits = c(0,1)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1)) +
scale_fill_viridis_c(option = 'cividis') +
## add the locations of FMSY from global method
geom_point(data = out2_global, aes(x = FF_Area1, y = FF_Area2),fill = NA,
color = 'navy', size = 2, alpha = 0.3) +
geom_point(data = out2_global, aes(x = out2_global[which.max(out2_global[,'tyield']),'FF_Area1'],
y = out2_global[which.max(out2_global[,'tyield']),'FF_Area2']),
fill = NA, color = 'gold', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.85,
size = 3,
color ='gold',
label = as.expression(bquote(MSY[Global]~
"="~.(round(out2_global[which.max(out2_global[,'tyield']),
'tyield']))))) +
annotate('text',
x =0.8,
y = 0.8,
size = 3,
color ='gold',
label = as.expression(bquote(F[MSY_Global]~"="~.
(round(out2_global[which.max(out2_global$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
global
new
source(here('R','figs.R'))
# FFs <- expand.grid(seq(0,3,0.25),seq(0,3,0.25))
out <- makeOut(dat, FFs)
# https://stackoverflow.com/questions/57173162/function-for-uniroot-that-has-two-parameters-that-need-to-be-run-across-a-vector
## the example above actually has 3 pars and he optimizes over 2 known vectors
## the mapply will return the best F value given proportion
## inside dfx.dxSYS_new we run optim and use passed R, Rprop
## need a second version of this which uses global R, rprop
FpropVec <- seq(0.1,0.9,0.02) ##proportions of F in Area 1
fbest_new <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_new,
interval = c(0.01,5), ## higher if continuous, 1 instF
Fv_prop = Fv_prop)[1],
FpropVec)
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval =c(0.01,5),
Fv_prop = Fv_prop)[1],
FpropVec)
propmsy <- data.frame('Fprop' = FpropVec,
'FMSY_new' = matrix(unlist(fbest_new)),
'FMSY_global' = matrix(unlist(fbest_global)))
out2 <- makeOut2(propmsy=propmsytemp)
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
out2_global[which.max(out2_global$tyield),'FMSY']
out2_global[which.max(out2_new$tyield),]
out2_global[which.max(out2_global$tyield),]
out2_new[which.max(out2_new$tyield),]
doPR
## because plus group in this setup is confusing, do the same thing but
## run the population for 100 years and take terminal distribution.
## CONTINUOUS F DPOR ----
doPR <- function(dat, narea = 2, nage = 20, FF = c(0,0), ny = 100){
for(y in 1:ny){
if(y == 1){ ## establish array first time
NPR_SURV <- NPR <- BPR <- SBPR <- YPR <- array(NA, dim = c(narea,nage,narea,ny)) ## now 100 years of record
}
NPR_SURV[,1,1,y] <- NPR[,1,1,y] <- c(1,0);  NPR_SURV[,1,2,y] <-  NPR[,1,2,y] <- c(0,1) ## single recruit to each area
for(slice in 1:narea){
## Calc Survivors for each area-age within slice
for(age in 2:nage){
for(area in 1:narea){
## First calc survivors within area
# if(age > 1  & age < max(nage)) {
if(age > 1){
if(y > 1){
## NAA is those which age in from last year plus contribution of recruit
NPR_SURV[area,age,slice,y] <-  (NPR[area,age-1,slice,y-1]+NPR_SURV[area,age-1,slice,y])*
dat[age,'mortality',slice]*exp(-FF[area])
# cat(  NPR_SURV[area,age,slice,y], "\n")
} else{
NPR_SURV[area,age,slice,y] <- NPR_SURV[area,age-1,slice,y]*
dat[age,'mortality',slice]*exp(-FF[area])
} ## end first year setup
} ## end age > recruit
} ## end survivors-in-area
} ## end ages 2:nage
for(area in 1:narea){
for(age in 2:nage){
pLeave = NCome = 0
for(jarea in 1:narea){
if(area != jarea){
pLeave = pLeave + (1-dat[age,"proportion_stay",area])
NCome = NCome +(1-dat[age,"proportion_stay",jarea])*NPR_SURV[jarea,age,slice,y]
# cat(NCome,"\n")
} # end i != j
} # end subareas j
NPR[area,age,slice,y] <- ((1-pLeave)*NPR_SURV[area,age,slice,y] + NCome)
} ## end ages 2:nage
for(age in 1:nage){
NPR[area,age,slice,y] <- NPR[area,age,slice,y]/y  ## divide by y so we are still in per-recruit land (1 recruit per year)
BPR[area,age,slice,y] <- NPR[area,age,slice,y]*dat[age,"weight",area]
SBPR[area,age,slice,y] <- BPR[area,age,slice,y]*dat[age,"maturity",area]
## Calc Yield for each area-age - use baranov catch equation!
## bpr IS Wa x Nax
## make sure ztemp is not in exp space (so log mortality, which is exp(-M), really should be survivorship)
Ztemp <- -log(dat[age,'mortality',slice])+dat[age,"fishery_selectivity",area]*FF[area]
YPR[area,age,slice,y] <- (dat[age,"fishery_selectivity",area]*
FF[area]*
NPR[area,age,slice,y]*
dat[age,"weight",area]*
(1-exp(-Ztemp)))/(Ztemp)
# cat( YPR[area,age,slice,y],"\n")
} ## end ages 0:nage
} ## end areas
} ## end slices (array)
} ## end n years
# cat(FF,Ztemp,sum(YPR[,,,ny]), sum(NPR[,,,ny]), "\n")
return(list("NPR"=NPR[,,,ny]*ny,
"BPR"=BPR[,,,ny]*ny,
"SBPR"=SBPR[,,,ny]*ny,
"YPR"=YPR[,,,ny]*ny))
} ## end func
## Code to replicate Kapur et al (202X)
## Spatial reference points for next-gen assessment models
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
## matrix of scnearios, including name
## some notes on scenarios:
## slx only are like AAF.
## if name is "move" it uses the A1_SINK setup.
## A2 SINK is simply the reverse of A1 sink
## move light has less lopsitded movement w A1 still as SINK
SCENNAMES <- c('No Movement',
'Symmetrical Movement',
'A1 Sink',
'A2 Sink',
'A1 Low Selex + Symmetrical Movement',
'A1 Low Selex + A1 Sink',
'A1 Hi Selex + A1 Sink')
scen <- matrix(NA, nrow = length(SCENNAMES), ncol =17)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2',
"FMSY_NEW","FMSY_GLOBAL","FPROP_NEW","FPROP_GLOBAL",
"MSY_NEW","MSY_GLOBAL", "SBMSY_NEW","SBMSY_GLOBAL",
"A1DEPL_NEW", "A1DEPL_GLOBAL","A2DEPL_NEW", "A2DEPL_GLOBAL") ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <-SCENNAMES
scen[,'SLX_A50_A1'] <- c(9,9,9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(1,0.5,0.9,0.6,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(1,0.5,0.6,0.9,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
scen <- scen[- which(scen[,"SCENARIO_NAME"] == 'A2 Sink'),]
s=1
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
# FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
FFs <- expand.grid(seq(0,3,0.1),seq(0,3,0.1))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
outold <- data.frame(out[,,'old'])
5*0.4
# with(subset(out_use), plot(FF_Area1 +FF_Area2, tyield))
with(subset(out_use, FF_Area2 > 2), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use, FF_Area2 > 2), plot(FF_Area1 +FF_Area2, tyield))
with(subset(outold, FF_Area2 > 1.95), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use, FF_Area2 > 2), plot(FF_Area1 +FF_Area2, tyield))
with(subset(outold, FF_Area2 == 1.95), plot(FF_Area1 +FF_Area2, tyield))
subset(outold, FF_Area2 == 1.95)
outold
# with(subset(out_use), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use, FF_Area2 > 2), plot(FF_Area1 +FF_Area2, tyield))
with(subset(outold, FF_Area2 == 1.9), plot(FF_Area1 +FF_Area2, tyield))
subset(outold, FF_Area2 == 1.9)
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval =c(0.01,10),
Fv_prop = Fv_prop)[1],
FpropVec)
# https://stackoverflow.com/questions/57173162/function-for-uniroot-that-has-two-parameters-that-need-to-be-run-across-a-vector
## the example above actually has 3 pars and he optimizes over 2 known vectors
## the mapply will return the best F value given proportion
## inside dfx.dxSYS_new we run optim and use passed R, Rprop
## need a second version of this which uses global R, rprop
FpropVec <- seq(0.1,0.9,0.02) ##proportions of F in Area 1
fbest_new <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_new,
interval = c(0.01,5), ## higher if continuous, 1 instF
Fv_prop = Fv_prop)[1],
FpropVec)
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval =c(0.01,10),
Fv_prop = Fv_prop)[1],
FpropVec)
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval =c(0.01,2),
Fv_prop = Fv_prop)[1],
FpropVec)
propmsy <- data.frame('Fprop' = FpropVec,
'FMSY_new' = matrix(unlist(fbest_new)),
'FMSY_global' = matrix(unlist(fbest_global)))
out2 <- makeOut2(propmsy=propmsytemp)
propmsytemp = propmsy
out2 <- makeOut2(propmsy=propmsytemp)
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
## Code to replicate Kapur et al (202X)
## Spatial reference points for next-gen assessment models
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
Rprop_input = 0.5
## matrix of scnearios, including name
## some notes on scenarios:
## slx only are like AAF.
## if name is "move" it uses the A1_SINK setup.
## A2 SINK is simply the reverse of A1 sink
## move light has less lopsitded movement w A1 still as SINK
SCENNAMES <- c('No Movement',
'Symmetrical Movement',
'A1 Sink',
'A2 Sink',
'A1 Low Selex + Symmetrical Movement',
'A1 Low Selex + A1 Sink',
'A1 Hi Selex + A1 Sink')
scen <- matrix(NA, nrow = length(SCENNAMES), ncol =17)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2',
"FMSY_NEW","FMSY_GLOBAL","FPROP_NEW","FPROP_GLOBAL",
"MSY_NEW","MSY_GLOBAL", "SBMSY_NEW","SBMSY_GLOBAL",
"A1DEPL_NEW", "A1DEPL_GLOBAL","A2DEPL_NEW", "A2DEPL_GLOBAL") ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <-SCENNAMES
scen[,'SLX_A50_A1'] <- c(9,9,9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(1,0.5,0.9,0.6,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(1,0.5,0.6,0.9,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
scen <- scen[- which(scen[,"SCENARIO_NAME"] == 'A2 Sink'),]
s = 1
# FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05)) ## instF
FFs <- expand.grid(seq(0,3,0.1),seq(0,3,0.1)) ## continuous F
out <- makeOut(dat, FFs)
CENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
# FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05)) ## instF
FFs <- expand.grid(seq(0,3,0.1),seq(0,3,0.1)) ## continuous F
out <- makeOut(dat, FFs)
# out_use <- data.frame(out[,,'new']) ; View(out_use)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
getMSY
## calls from global environment to optimize
getMSY <- function(){
# https://stackoverflow.com/questions/57173162/function-for-uniroot-that-has-two-parameters-that-need-to-be-run-across-a-vector
## the example above actually has 3 pars and he optimizes over 2 known vectors
## the mapply will return the best F value given proportion
## inside dfx.dxSYS_new we run optim and use passed R, Rprop
## need a second version of this which uses global R, rprop
FpropVec <- seq(0.1,0.9,0.02) ##proportions of F in Area 1
fbest_new <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_new,
interval = c(0.01,5), ## higher if continuous, 1 instF
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed 2d optimization (new method) \n')
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval =c(0.01,2),
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed global optimization (old method) \n')
propmsy <- data.frame('Fprop' = FpropVec,
'FMSY_new' = matrix(unlist(fbest_new)),
'FMSY_global' = matrix(unlist(fbest_global)))
return(propmsy)
}
# with(subset(out_use), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(out_use, FF_Area2 > 2), plot(FF_Area1 +FF_Area2, tyield))
# with(subset(outold, FF_Area2 == 1.9), plot(FF_Area1 +FF_Area2, tyield))
propmsytemp <- getMSY()
doPR()
doPR
Rprop_input
out2 <- makeOut2(propmsy=propmsytemp)
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
SCENARIO <- scen[s,'SCENARIO_NAME']
## save stuff; looks to global SCENARIO for filename
filetemp <- here('figs',paste0(Sys.Date(),"-h=",paste0(steep[1],"_",steep[2]),"-",SCENARIO))
dir.create(filetemp)
source(here('R','figs.R'))
save(out, file = paste0(filetemp,'/out.RDATA'))
save(out2, file =  paste0(filetemp, '/out2.RDATA'))
save(propmsytemp, file =  paste0(filetemp, '/propmsy.RDATA'))
out2_global
out2_new[which.max(out2_new[,'tyield']),'FF_Area2']
out2_new[which.max(out2_new[,'tyield']),]
out2_global[which.max(out2_global[,'tyield']),]
doP
doPR
