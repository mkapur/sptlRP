for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
# N[1,age,slice] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,slice] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
# if(age < 20 & jarea == 1) cat(term2,"\n")
#   pLeave = pLeave + (1-usedat$dat[age,"proportion_stay",area]) ##  leaving for elsewhere
#   NCome = NCome +(1-usedat$dat[age,"proportion_stay",jarea])*
#     N[jarea,age-1,slice]*exp(-Z[jarea, age-1]) ## mortality in other area
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
# N[area,age,slice] <- (1-pLeave)*N[area,age-1,slice]*exp(-Z[area, age-1]) + NCome
# N[area,age,slice] <- N[area,age-1,slice]*exp(-Z[area, age-1])  ## comment out pleave ncome
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
# plot(N)
return(list('N' = N,'Z' = Z))
}
## run sims ----
for(s in 1:3){ #nrow(scen)){
#* build dat ----
SCENARIO = scen[s,'SCENARIO_NAME']
steeps <- c(scen[s,'H1'], scen[s,'H2'])
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = NULL, ## default wa
mort = scen[s,'NATM'],
h = steeps,
input_prop = scen[s,'PROPR'],
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50= c(as.numeric(scen[s,'SLX_A50_A1']),9),
slx_a95= c(as.numeric(scen[s,'SLX_A95_A1']),13),
pStay=pStayt,
qq = c(scen[s,'Q1'],scen[s,'Q2']))
#print(dat)
datlist[[s]] <- dat
# # #* build surface ----
# FMAX <- scen[s,'FMAX']
# # FF.vec = seq(0,FMAX,0.05)
# FF.vec = seq(0,2,0.25)
# FFs <- expand.grid(FF.vec,FF.vec)
# surface <- array(NA, dim = c(nrow(FFs),7,2),
#                  dimnames = list(c(1:nrow(FFs)),
#                                  c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
#                                  c('local','global')))
# for(i in 1:nrow(FFs)){
#   if(i %% 100 ==0) cat(i,"\n")
#   surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
#   ## fill in surface
#   useFs <- log(as.numeric(c(FFs[i,])))
#   tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
#   surface[i,'tSSB','local'] <- tyields['local_tssb']
#   surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
#   surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
#   surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
#   surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
#   surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
#   surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
#   surface[i,'req_prop','global'] <- dat$input_prop
#   surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
#   surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
# } ## end nrow FFs
#* find MSY ----
ss_global <- optim(par = log(c(0.4,0.4)),
dat= dat,
assume = 'GLOBAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
for(k in 1:5){
ss_global <- optim(par = ss_global$par,
dat= dat,
assume = 'GLOBAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
}
cat(SCENARIO,"\n")
# cat(dat$h,"\n")
cat( round(exp(ss_global$par),2),"\n")
start <-  if(s != 9) log(c(0.05,0.05)) else(ss_global$par)
start =  log(c(0.05,0.05))
ss_local <- optim(par = start,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 100000,
ndeps = rep(1e-4,2)))
cat( round(exp(ss_local$par),2),"\n")
for(k in 1:5){
## save time if stabilized
# if(all(round(exp(ss_local$par),2) == round(exp(ss_global$par),2))) next()
ss_local <- optim(par = ss_local$par,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
cat( round(exp(ss_local$par),2),"\n")
}
cat( round(exp(ss_local$par),2),"\n")
# dat$h = c(0.6,0.8)
# tt <- runSim(par = log(c(0.45,0.45)), dat, ret = 'vals', assume = NA);tt
# tt <- runSim(par = c(-1000,-1000), dat, ret = 'vals', assume = NA)
# tt['req_local']*c(tt['req_local_prop'],1-tt['req_local_prop'])
refpts_local <-  runSim(par =ss_local$par,dat, ret = 'vals', assume = NA)
refpts_global <-  runSim(par =ss_global$par,dat, ret = 'vals', assume = NA)
cat(refpts_local['req_local_prop'],"\n")
#* fill scen----
scen[s,'FMSY_LOCAL_A1'] <- exp(ss_local$par)[1]
scen[s,'FMSY_LOCAL_A2'] <- exp(ss_local$par)[2]
scen[s,'FMSY_GLOBAL_A1'] <-exp(ss_global$par)[1]
scen[s,'FMSY_GLOBAL_A2'] <- exp(ss_global$par)[2]
scen[s,'FMSY_LOCAL'] <- sum(exp(ss_local$par))
scen[s,'MSY_LOCAL'] <- refpts_local['tyield_local']
scen[s,'SBMSY_LOCAL'] <- refpts_local['local_tssb']
scen[s,'A1SB0_LOCAL'] <-  refpts_local['local_tssb0']*refpts_local['req_local_prop']
scen[s,'A2SB0_LOCAL'] <-  refpts_local['local_tssb0']*(1-refpts_local['req_local_prop'])
scen[s,'A1DEPL_LOCAL'] <-  (refpts_local['local_tssb']*refpts_local['req_local_prop'])/  scen[s,'A1SB0_LOCAL']
scen[s,'A2DEPL_LOCAL'] <- (refpts_local['local_tssb']*(1-refpts_local['req_local_prop']))/   scen[s,'A2SB0_LOCAL']
scen[s,'A1SB0_GLOBAL'] <-   refpts_global['global_tssb0']*dat$input_prop
scen[s,'A2SB0_GLOBAL'] <-  refpts_global['global_tssb0']*(1-dat$input_prop)
scen[s,'FMSY_GLOBAL'] <- sum(exp(ss_global$par))
scen[s,'MSY_GLOBAL'] <-  refpts_global['tyield_global']
scen[s,'SBMSY_GLOBAL'] <- refpts_global['global_tssb']
scen[s,'SBMSY_A1_RATIO'] <- refpts_global['global_a1ssb']/refpts_local['local_a1ssb']
scen[s,'SBMSY_A2_RATIO'] <- refpts_global['global_a2ssb']/refpts_local['local_a2ssb']
scen[s,'A1DEPL_GLOBAL'] <- refpts_global['global_tssb']*dat$input_prop/  scen[s,'A1SB0_GLOBAL']
scen[s,'A2DEPL_GLOBAL'] <-  refpts_global['global_tssb']*(1-dat$input_prop)/  scen[s,'A2SB0_GLOBAL']
#
# # #* plotting ----
# maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
# global <- data.frame(surface[,,'global']) %>%
#   filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
#   ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
#   geom_tile() +
#   coord_equal() +
#   ggsidekick::theme_sleek() +
#   theme(legend.position = 'top')+
#   scale_fill_viridis_c() +
#   scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
#   scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
#   geom_point(data = NULL,
#              aes(x = exp(ss_global$par[1]), y = exp(ss_global$par[2])),
#              fill = NA, color = 'blue', size = 2, pch =15) +
#   annotate('text',
#            x =0.6*maxf1,
#            y = 0.85*maxf1,
#            size = 3,
#            color = 'blue',
#            label = as.expression(bquote(MSY[Global]~ "="~.(round(refpts_global['tyield_global'],2))))) +
#   annotate('text',
#            x =0.6*maxf1,
#            y = 0.8*maxf1,
#            size = 3,
#            color ='blue',
#            label = as.expression(bquote(F[MSY_Global]~"="~.(round(exp(ss_global$par[1]),2))~"Area 1, "~.(round(exp(ss_global$par[2]),2))~"Area 2"))) +
#   labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
# locl <- data.frame(surface[,,'local']) %>%
#   filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
#   ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
#   geom_tile() +
#   coord_equal() +
#   ggsidekick::theme_sleek() +
#   theme(legend.position = 'top')+
#   scale_fill_viridis_c() +
#   scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
#   scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
#   geom_point(data = NULL,
#              aes(x = exp(ss_local$par[1]), y = exp(ss_local$par[2])),
#              fill = NA, color = 'blue', size = 2, pch =15)+
#   annotate('text',
#            x =0.6*maxf1,
#            y = 0.85*maxf1,
#            size = 3,
#            color = 'blue',
#            label = as.expression(bquote(MSY[Local]~ "="~.(round(refpts_local['tyield_local'],2))))) +
#   annotate('text',
#            x =0.6*maxf1,
#            y = 0.8*maxf1,
#            size = 3,
#            color ='blue',
#            label = as.expression(bquote(F[MSY_Local]~"="~.(round(exp(ss_local$par[1]),2))~"Area 1, "~.(round(exp(ss_local$par[2]),2))~"Area 2"))) +
#   labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
#
#
# ## viewing plots in this manner requires the patchwork() package
# locl   | global
#
# #* save -----
# filetemp <- here('output',paste0(Sys.Date(),"-h=",paste0(steeps[1],"_",steeps[2]),"-",SCENARIO))
# dir.create(filetemp)
# ggsave(locl   | global,
#        file = paste0(filetemp,"/heatmap.png"),
#        width = 8, height = 6, unit = 'in', dpi = 520)
# save(ss_local, file = paste0(filetemp,'/ss_local.RDATA'))
# save(ss_global, file = paste0(filetemp,'/ss_local.RDATA'))
# save(surface, file = paste0(filetemp,'/surface.RDATA'))
# rm(ss_local); rm(ss_global); rm(surface); rm(locl); rm(global)
} ## end s in scen
F1
WAA <-  matrix(c(dat$dat[Ages+1,'weight',1], dat$dat[Ages+1,'weight',2]),nrow=2,ncol=Nages, byrow = T)
Sel <- matrix(c(dat$dat[Ages+1,'fishery_selectivity',1], dat$dat[Ages+1,'fishery_selectivity',2]),nrow=2,ncol=Nages, byrow = T)
Fec <- matrix(c(Sel[1,]*WAA[1,], Sel[2,]*WAA[2,]),nrow=2,ncol=Nages, byrow = T)
N_F0 <- doNAA2(F1=0,F2=0, usedat =dat, Sel, Q)$N
par(mfrow = c(2,3))
plot(N_Z_F$N[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_Z_F$N[2,,1])
plot(N_Z_F$N[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_Z_F$N[2,,2])
plot(colSums(N_Z_F$N[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
lines(colSums(N_Z_F$N[,,2]))
legend('topright', legend = c('present in a1','present in a2'),pch = 1, col = c('blue','black'))
plot(N_F0[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_F0[2,,1])
plot(N_F0[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_F0[2,,2])
plot(colSums(N_F0[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
lines(colSums(N_F0[,,2]))
legend('topright', legend = c('present in a1','present in a2'),pch = 1, col = c('blue','black'))
F1 = F2 = 0.5
par(mfrow = c(2,3))
plot(N_Z_F$N[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_Z_F$N[2,,1])
plot(N_Z_F$N[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_Z_F$N[2,,2])
plot(colSums(N_Z_F$N[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
lines(colSums(N_Z_F$N[,,2]))
legend('topright', legend = c('present in a1','present in a2'),pch = 1, col = c('blue','black'))
plot(N_F0[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_F0[2,,1])
plot(N_F0[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_F0[2,,2])
plot(colSums(N_F0[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
lines(colSums(N_F0[,,2]))
legend('topright', legend = c('present in a1','present in a2'),pch = 1, col = c('blue','black'))
N_Z_F <- doNAA2(F1, F2, usedat = dat, Sel, Q)
par(mfrow = c(2,3))
plot(N_Z_F$N[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_Z_F$N[2,,1])
plot(N_Z_F$N[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_Z_F$N[2,,2])
plot(colSums(N_Z_F$N[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
lines(colSums(N_Z_F$N[,,2]))
legend('topright', legend = c('present in a1','present in a2'),pch = 1, col = c('blue','black'))
plot(N_F0[1,,1], col = 'blue', main = 'spawned in a1', ylim = c(0,1))
lines(N_F0[2,,1])
plot(N_F0[1,,2], col = 'blue', main = 'spawned in a2', ylim = c(0,1))
lines(N_F0[2,,2])
plot(colSums(N_F0[,,1]), col = 'blue', main = 'totals', ylim = c(0,1))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
age
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
# N[1,age,slice] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,slice] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
for(area in 1:narea)
# N[1,age,1] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,2] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea & Q[area] != 1){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
plot(N)
N[,1:20,]
Q
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
for(area in 1:narea)
# N[1,age,1] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,2] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
plot(N)
graphics.off()
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
# for(area in 1:narea)
# N[1,age,1] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,2] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+term2*exp(-(Z[area,age]))
}  # end subareas j
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
plot(N)
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
# for(area in 1:narea)
# N[1,age,1] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,2] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
# if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
}  # end subareas j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+
term2*exp(-(Z[area,age]))
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
plot(N)
Q = 2
Q = dat$Q
area = 2
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
term2
age = 20
jarea
jarea = 1
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
term2
area = 1;jarea = 2
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
term2
Q
for(slice in 1:narea){
for(age in 2:Nages){
## brute force src-sink method (a2 is sink)
# for(area in 1:narea)
# N[1,age,1] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,slice]*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,2] <- N[2,age-1,slice]*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,slice]*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
for(area in 1:narea){
# pLeave = NCome = 0
term2 = 0
for(jarea in 1:narea){
if(area != jarea){
## incomings - will be zero if no movement from other area
term2 <-  N[jarea,age-1,slice]*exp(-M)*(1-exp(-Sel[jarea,age]*Q[jarea]))
# if(Q[jarea] == 1) term2 <- 0
# if(age < 20 & jarea == 1) cat(area,jarea,term2,"\n")
} # end i != j
}  # end subareas j
N[area,age,slice] <- N[area,age-1,slice]*exp(-M)*exp(-(Z[area,age]))*exp(-Sel[area,age]*Q[area])+
term2*exp(-(Z[area,age]))
## bring in migrants & fish them here
} ## end sink-area loop
} ## end ages
} ## end source-area loop
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-Z[area,Nages]))
}}
# cat(N[1,2,1],"\n")
plot(N)
