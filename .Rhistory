"FF_Area1","FF_Area2",
"estRbar","estRprop",
"Yield_A1","Yield_A2",
"SB_A1","SB_A2",
"SB0_A1","SB0_A2",
"expR_A1","expR_A2",
"obsR_A1","obsR_A2", 'tyield'),
c('new','old'))) ## each slice is old or new
for(i in 1:nrow(propmsy)){
out2[i,'Fprop',1:2] <- propmsy[i,'Fprop']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_new']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_global']
FFs_new <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_new'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_new'] )
FFs_global <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_global'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_global'] )
out2[i,'FF_Area1',1] <- FFs_new[1]; out2[i,'FF_Area2',1] <- FFs_new[2]
out2[i,'FF_Area1',2] <- FFs_global[1]; out2[i,'FF_Area2',2] <- FFs_global[2]
opt0 <- optim_loop(FFs_new,i = NA) ## already specified
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out2[i,'estRbar',1] <- opt_temp$par[1];  out2[i,'estRprop',1] <- opt_temp$par[2];
out2[i,'estRbar',2] <- R0_global;  out2[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out2[i,'estRbar',1], passRprop =   out2[i,'estRprop',1], YPR_F = tmp$YPR))
out2[i,'Yield_A1',1] <- yields[1];  out2[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',1] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',1] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',1] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',1] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',1],
passRprop = out2[i,'estRprop',1],
SB_F = sbs, SB_0 =sb0))
out2[i,'expR_A1',1] <- rexp[1];  out2[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',1]*c(out2[i,'estRprop',1],1-out2[i,'estRprop',1]))
out2[i,'obsR_A1',1] <- obsr[1];  out2[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out2[i,'estRbar',2], passRprop =   out2[i,'estRprop',2], YPR_F = tmp$YPR))
out2[i,'Yield_A1',2] <- yields[1];  out2[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',2] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',2] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',2] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',2] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',2], passRprop =out2[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out2[i,'expR_A1',2] <- rexp[1];  out2[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',2]*c( out2[i,'estRbar',2],1-out2[i,'estRprop',2]))
out2[i,'obsR_A1',2] <- obsr[1];  out2[i,'obsR_A2',2] <- obsr[2];
out2[,'tyield',2] <- out2[,'Yield_A1',2]+ out2[,'Yield_A2',2]
rm(tmp)
}
out[,'tyield',2]
head(out2)
which.max(out2[,'tyield','new'])
out2[,'tyield','new']
for(i in 1:nrow(propmsy)){
out2[i,'Fprop',1:2] <- propmsy[i,'Fprop']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_new']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_global']
FFs_new <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_new'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_new'] )
FFs_global <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_global'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_global'] )
out2[i,'FF_Area1',1] <- FFs_new[1]; out2[i,'FF_Area2',1] <- FFs_new[2]
out2[i,'FF_Area1',2] <- FFs_global[1]; out2[i,'FF_Area2',2] <- FFs_global[2]
opt0 <- optim_loop(FFs_new,i = NA) ## already specified
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out2[i,'estRbar',1] <- opt_temp$par[1];  out2[i,'estRprop',1] <- opt_temp$par[2];
out2[i,'estRbar',2] <- R0_global;  out2[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out2[i,'estRbar',1], passRprop =   out2[i,'estRprop',1], YPR_F = tmp$YPR))
out2[i,'Yield_A1',1] <- yields[1];  out2[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',1] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',1] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',1] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',1] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',1],
passRprop = out2[i,'estRprop',1],
SB_F = sbs, SB_0 =sb0))
out2[i,'expR_A1',1] <- rexp[1];  out2[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',1]*c(out2[i,'estRprop',1],1-out2[i,'estRprop',1]))
out2[i,'obsR_A1',1] <- obsr[1];  out2[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out2[i,'estRbar',2], passRprop =   out2[i,'estRprop',2], YPR_F = tmp$YPR))
out2[i,'Yield_A1',2] <- yields[1];  out2[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',2] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',2] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',2] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',2] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',2], passRprop =out2[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out2[i,'expR_A1',2] <- rexp[1];  out2[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',2]*c( out2[i,'estRbar',2],1-out2[i,'estRprop',2]))
out2[i,'obsR_A1',2] <- obsr[1];  out2[i,'obsR_A2',2] <- obsr[2];
out2[,'tyield',2] <- out2[i,'Yield_A1',2]+ out2[i,'Yield_A2',2]
rm(tmp)
}
out2[,'tyield','new']
for(i in 1:nrow(propmsy)){
out2[i,'Fprop',1:2] <- propmsy[i,'Fprop']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_new']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_global']
FFs_new <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_new'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_new'] )
FFs_global <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_global'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_global'] )
out2[i,'FF_Area1',1] <- FFs_new[1]; out2[i,'FF_Area2',1] <- FFs_new[2]
out2[i,'FF_Area1',2] <- FFs_global[1]; out2[i,'FF_Area2',2] <- FFs_global[2]
opt0 <- optim_loop(FFs_new,i = NA) ## already specified
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out2[i,'estRbar',1] <- opt_temp$par[1];  out2[i,'estRprop',1] <- opt_temp$par[2];
out2[i,'estRbar',2] <- R0_global;  out2[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out2[i,'estRbar',1], passRprop =   out2[i,'estRprop',1], YPR_F = tmp$YPR))
out2[i,'Yield_A1',1] <- yields[1];  out2[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',1] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',1] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',1] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',1] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',1],
passRprop = out2[i,'estRprop',1],
SB_F = sbs, SB_0 =sb0))
out2[i,'expR_A1',1] <- rexp[1];  out2[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',1]*c(out2[i,'estRprop',1],1-out2[i,'estRprop',1]))
out2[i,'obsR_A1',1] <- obsr[1];  out2[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out2[i,'estRbar',2], passRprop =   out2[i,'estRprop',2], YPR_F = tmp$YPR))
out2[i,'Yield_A1',2] <- yields[1];  out2[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',2] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',2] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',2] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',2] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',2], passRprop =out2[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out2[i,'expR_A1',2] <- rexp[1];  out2[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',2]*c( out2[i,'estRbar',2],1-out2[i,'estRprop',2]))
out2[i,'obsR_A1',2] <- obsr[1];  out2[i,'obsR_A2',2] <- obsr[2];
out2[i,'tyield',2] <- out2[i,'Yield_A1',2]+ out2[i,'Yield_A2',2]
rm(tmp)
}
out2[,'tyield','new']
for(i in 1:nrow(propmsy)){
out2[i,'Fprop',1:2] <- propmsy[i,'Fprop']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_new']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_global']
FFs_new <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_new'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_new'] )
FFs_global <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_global'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_global'] )
out2[i,'FF_Area1',1] <- FFs_new[1]; out2[i,'FF_Area2',1] <- FFs_new[2]
out2[i,'FF_Area1',2] <- FFs_global[1]; out2[i,'FF_Area2',2] <- FFs_global[2]
opt0 <- optim_loop(FFs_new,i = NA) ## already specified
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out2[i,'estRbar',1] <- opt_temp$par[1];  out2[i,'estRprop',1] <- opt_temp$par[2];
out2[i,'estRbar',2] <- R0_global;  out2[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out2[i,'estRbar',1], passRprop =   out2[i,'estRprop',1], YPR_F = tmp$YPR))
out2[i,'Yield_A1',1] <- yields[1];  out2[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',1] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',1] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',1] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',1] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',1],
passRprop = out2[i,'estRprop',1],
SB_F = sbs, SB_0 =sb0))
out2[i,'expR_A1',1] <- rexp[1];  out2[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',1]*c(out2[i,'estRprop',1],1-out2[i,'estRprop',1]))
out2[i,'obsR_A1',1] <- obsr[1];  out2[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out2[i,'estRbar',2], passRprop =   out2[i,'estRprop',2], YPR_F = tmp$YPR))
out2[i,'Yield_A1',2] <- yields[1];  out2[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',2] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',2] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',2] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',2] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',2], passRprop =out2[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out2[i,'expR_A1',2] <- rexp[1];  out2[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',2]*c( out2[i,'estRbar',2],1-out2[i,'estRprop',2]))
out2[i,'obsR_A1',2] <- obsr[1];  out2[i,'obsR_A2',2] <- obsr[2];
out2[i,'tyield',1] <- out2[i,'Yield_A1',1]+ out2[i,'Yield_A2',1]
out2[i,'tyield',2] <- out2[i,'Yield_A1',2]+ out2[i,'Yield_A2',2]
rm(tmp)
}
out2[,'tyield','new']
which.max(out2[,'tyield','new'])
which.max(out2[,'tyield','new'])
out2[which.max(out2[,'tyield','new'],'tyield','new']
out2[which.max(out2[,'tyield','new']),'tyield','new']
out[,,'new'] %>%
# out_use %>%
mutate(Yield_Total = Yield_A1+Yield_A2) %>%
select(FF_Area1,FF_Area2, Yield_Total) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2[,,'new'], aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)+
geom_point(data = out2[,,'new'], aes(x = out2[,,'new'][which.max(tyield),'FF_Area1'],
y = out2[,,'new'][which.max(tyield),'FF_Area2']),
color = 'blue', size = 2, pch =15)+
annotate('text',
x = out2[which.max(out2[,'tyield','new']),'FF_Area1','new']*1.15,
y = out2[which.max(out2[,'tyield','new']),'FF_Area2','new']*1.15,
size = 3,
color ='blue',
label = as.expression(bquote(MSY[Total]~"="~.(round(out2[which.max(out2[,'tyield','new']),'tyield','new']))))) +
# annotate('text',
#          x = out_use2[which.max(out_use2$tyield),'FF_Area1']*1.17,
#          y = out_use2[which.max(out_use2$tyield),'FF_Area2']*1.07,
#          size = 3,
#          color ='blue',
#          label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out[,,'new'] %>%
data.frame() %>%
# out_use %>%
mutate(Yield_Total = Yield_A1+Yield_A2) %>%
select(FF_Area1,FF_Area2, Yield_Total) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2[,,'new'], aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)+
geom_point(data = out2[,,'new'], aes(x = out2[,,'new'][which.max(tyield),'FF_Area1'],
y = out2[,,'new'][which.max(tyield),'FF_Area2']),
color = 'blue', size = 2, pch =15)+
annotate('text',
x = out2[which.max(out2[,'tyield','new']),'FF_Area1','new']*1.15,
y = out2[which.max(out2[,'tyield','new']),'FF_Area2','new']*1.15,
size = 3,
color ='blue',
label = as.expression(bquote(MSY[Total]~"="~.(round(out2[which.max(out2[,'tyield','new']),'tyield','new']))))) +
# annotate('text',
#          x = out_use2[which.max(out_use2$tyield),'FF_Area1']*1.17,
#          y = out_use2[which.max(out_use2$tyield),'FF_Area2']*1.07,
#          size = 3,
#          color ='blue',
#          label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out_use <- data.frame(out[,,'new'])
out_use %>%
mutate(Yield_Total = Yield_A1+Yield_A2) %>%
select(FF_Area1,FF_Area2, Yield_Total)
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2"))
out_use
## now take what's determined to be FMSY  and return ssb, yield etc
## this is telling us where the best yield actually occurs, as a function of both
out2 <- array(NA, dim = c(nrow(propmsy),17,2),
dimnames = list(c(rep(NA, nrow(propmsy))),c("Fprop", "FMSY",
"FF_Area1","FF_Area2",
"estRbar","estRprop",
"Yield_A1","Yield_A2",
"SB_A1","SB_A2",
"SB0_A1","SB0_A2",
"expR_A1","expR_A2",
"obsR_A1","obsR_A2", 'tyield'),
c('new','old'))) ## each slice is old or new
for(i in 1:nrow(propmsy)){
out2[i,'Fprop',1:2] <- propmsy[i,'Fprop']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_new']
out2[i,'FMSY',1] <- propmsy[i,'FMSY_global']
FFs_new <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_new'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_new'] )
FFs_global <- c(propmsy[i,'Fprop']*propmsy[i,'FMSY_global'],(1-propmsy[i,'Fprop'])*propmsy[i,'FMSY_global'] )
out2[i,'FF_Area1',1] <- FFs_new[1]; out2[i,'FF_Area2',1] <- FFs_new[2]
out2[i,'FF_Area1',2] <- FFs_global[1]; out2[i,'FF_Area2',2] <- FFs_global[2]
opt0 <- optim_loop(FFs_new,i = NA) ## already specified
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out2[i,'estRbar',1] <- opt_temp$par[1];  out2[i,'estRprop',1] <- opt_temp$par[2];
out2[i,'estRbar',2] <- R0_global;  out2[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out2[i,'estRbar',1], passRprop =   out2[i,'estRprop',1], YPR_F = tmp$YPR))
out2[i,'Yield_A1',1] <- yields[1];  out2[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',1] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',1] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',1], passRprop = out2[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',1] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',1] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',1],
passRprop = out2[i,'estRprop',1],
SB_F = sbs, SB_0 =sb0))
out2[i,'expR_A1',1] <- rexp[1];  out2[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',1]*c(out2[i,'estRprop',1],1-out2[i,'estRprop',1]))
out2[i,'obsR_A1',1] <- obsr[1];  out2[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out2[i,'estRbar',2], passRprop =   out2[i,'estRprop',2], YPR_F = tmp$YPR))
out2[i,'Yield_A1',2] <- yields[1];  out2[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp$SBPR)
out2[i,'SB_A1',2] <-  as.numeric(sbs[1]);  out2[i,'SB_A2',2] <-  as.numeric(sbs[2]);
sb0 <- getSB(passR = out2[i,'estRbar',2], passRprop = out2[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out2[i,'SB0_A1',2] <-  as.numeric(sb0[1]);  out2[i,'SB0_A2',2] <-  as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out2[i,'estRbar',2], passRprop =out2[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out2[i,'expR_A1',2] <- rexp[1];  out2[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out2[i,'estRbar',2]*c( out2[i,'estRbar',2],1-out2[i,'estRprop',2]))
out2[i,'obsR_A1',2] <- obsr[1];  out2[i,'obsR_A2',2] <- obsr[2];
out2[i,'tyield',1] <- out2[i,'Yield_A1',1]+ out2[i,'Yield_A2',1]
out2[i,'tyield',2] <- out2[i,'Yield_A1',2]+ out2[i,'Yield_A2',2]
rm(tmp)
}
out2
out_use <- data.frame(out[,,'new'])
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2"))
out2[i,'tyield',2]
head(out_use)
out_use <- data.frame(out2[,,'new'])
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2"))
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2[,,'new'], aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)+
geom_point(data = out2[,,'new'], aes(x = out2[,,'new'][which.max(tyield),'FF_Area1'],
y = out2[,,'new'][which.max(tyield),'FF_Area2']),
color = 'blue', size = 2, pch =15)+
annotate('text',
x = out2[which.max(out2[,'tyield','new']),'FF_Area1','new']*1.15,
y = out2[which.max(out2[,'tyield','new']),'FF_Area2','new']*1.15,
size = 3,
color ='blue',
label = as.expression(bquote(MSY[Total]~"="~.(round(out2[which.max(out2[,'tyield','new']),'tyield','new']))))) +
# annotate('text',
#          x = out_use2[which.max(out_use2$tyield),'FF_Area1']*1.17,
#          y = out_use2[which.max(out_use2$tyield),'FF_Area2']*1.07,
#          size = 3,
#          color ='blue',
#          label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile()
## apply new method
out <- array(NA, dim = c(nrow(FFs),15,2),
dimnames = list(c(1:nrow(FFs)),c("FF_Area1","FF_Area2",
"estRbar","estRprop",
"Yield_A1","Yield_A2",
"SB_A1","SB_A2",
"SB0_A1","SB0_A2",
"expR_A1","expR_A2",
"obsR_A1","obsR_A2","tyield"),
c('new','old'))) ## each slice is old or new
for(i in 1:nrow(FFs)){
out[i,'FF_Area1',1] <- FFs[i,1];   out[i,'FF_Area2',1] <- FFs[i,2]
## this is the new method; old method uses global inputs
opt0 <- optim_loop(FFs,i)
opt_temp <- opt0$opt_temp; tmp0 <- opt0$tmp0; tmp <- opt0$tmp
out[i,'estRbar',1] <- opt_temp$par[1];  out[i,'estRprop',1] <- opt_temp$par[2];
out[i,'estRbar',2] <- R0_global;  out[i,'estRprop',2] <- Rprop_input
## derived quants at optimized value
yields <- as.numeric(getYield(passR = out[i,'estRbar',1], passRprop =   out[i,'estRprop',1], YPR_F = tmp$YPR))
out[i,'Yield_A1',1] <- yields[1];  out[i,'Yield_A2',1] <- yields[2];
sbs <-getSB(passR = out[i,'estRbar',1], passRprop = out[i,'estRprop',1], SBPR_F = tmp$SBPR)
out[i,'SB_A1',1] <- as.numeric(sbs[1]);  out[i,'SB_A2',1] <- as.numeric(sbs[2]);
sb0 <- getSB(passR = out[i,'estRbar',1], passRprop = out[i,'estRprop',1], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1',1] <- as.numeric(sb0[1]);  out[i,'SB0_A2',1] <-as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out[i,'estRbar',1],
passRprop = out[i,'estRprop',1],
SB_F =sbs, SB_0 =sb0))
out[i,'expR_A1',1] <- rexp[1];  out[i,'expR_A2',1] <- rexp[2];
obsr <- as.numeric(out[i,'estRbar',1]*c(out[i,'estRprop',1],1-out[i,'estRprop',1]))
out[i,'obsR_A1',1] <- obsr[1];  out[i,'obsR_A2',1] <- obsr[2];
rm(opt0)
## derived quants at global value ("current method")
yields <- as.numeric(getYield(passR = out[i,'estRbar',2], passRprop =   out[i,'estRprop',2], YPR_F = tmp$YPR))
out[i,'Yield_A1',2] <- yields[1];  out[i,'Yield_A2',2] <- yields[2];
sbs <-getSB(passR = out[i,'estRbar',2], passRprop = out[i,'estRprop',2], SBPR_F = tmp$SBPR)
out[i,'SB_A1',2] <- as.numeric(sbs[1]);  out[i,'SB_A2',2] <- as.numeric(sbs[2]);
sb0 <- getSB(passR = out[i,'estRbar',2], passRprop = out[i,'estRprop',2], SBPR_F = tmp0$SBPR)
out[i,'SB0_A1',2] <- as.numeric(sb0[1]);  out[i,'SB0_A2',2] <-as.numeric(sb0[2]);
rexp <- as.numeric(getExpR(passR = out[i,'estRbar',2], passRprop =   out[i,'estRprop',2],
SB_F = data.frame(sbs), SB_0 =data.frame(sb0)))
out[i,'expR_A1',2] <- rexp[1];  out[i,'expR_A2',2] <- rexp[2];
obsr <- as.numeric(out[i,'estRbar',2]*c( out[i,'estRbar',2],1-out[i,'estRprop',2]))
out[i,'obsR_A1',2] <- obsr[1];  out[i,'obsR_A2',2] <- obsr[2];
out[i,'tyield',1] <- out[i,'Yield_A1',1]+ out[i,'Yield_A2',1]
out[i,'tyield',2] <- out[i,'Yield_A1',2]+ out[i,'Yield_A2',2]
}
out_use <- data.frame(out[,,'new'])
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2[,,'new'], aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)+
geom_point(data = out2[,,'new'], aes(x = out2[which.max(out2[,'tyield','new']),'FF_Area1','new'],
y = out2[which.max(out2[,'tyield','new']),'FF_Area2','new']),
color = 'blue', size = 2, pch =15)+
annotate('text',
x = out2[which.max(out2[,'tyield','new']),'FF_Area1','new']*1.15,
y = out2[which.max(out2[,'tyield','new']),'FF_Area2','new']*1.15,
size = 3,
color ='blue',
label = as.expression(bquote(MSY[Total]~"="~.(round(out2[which.max(out2[,'tyield','new']),'tyield','new']))))) +
# annotate('text',
#          x = out_use2[which.max(out_use2$tyield),'FF_Area1']*1.17,
#          y = out_use2[which.max(out_use2$tyield),'FF_Area2']*1.07,
#          size = 3,
#          color ='blue',
#          label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white')
out_use
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2[,,'new'], aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)
out2_use <- data.frame(out2[,,'new'])
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2_use, aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)+
geom_point(data = out2_use, aes(x = out2_use[which.max(out2_use[,'tyield','new']),'FF_Area1','new'],
y = out2_use[which.max(out2_use[,'tyield','new']),'FF_Area2','new']),
color = 'blue', size = 2, pch =15)+
annotate('text',
x = out2_use[which.max(out2_use[,'tyield','new']),'FF_Area1','new']*1.15,
y = out2_use[which.max(out2_use[,'tyield','new']),'FF_Area2','new']*1.15,
size = 3,
color ='blue',
label = as.expression(bquote(MSY[Total]~"="~.(round(out2_use[which.max(out2_use[,'tyield','new']),'tyield','new']))))) +
# annotate('text',
#          x = out_use2[which.max(out_use2$tyield),'FF_Area1']*1.17,
#          y = out_use2[which.max(out_use2$tyield),'FF_Area2']*1.07,
#          size = 3,
#          color ='blue',
#          label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() + theme(legend.position = 'top') +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY
geom_point(data = out2_use, aes(x = FF_Area1, y = FF_Area2), color = 'grey66', size = 2)
out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value)
