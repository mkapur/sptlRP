scen[s,'FMSY_LOCAL_A2'] <- exp(ss_local$par)[2]
scen[s,'FMSY_GLOBAL_A1'] <-exp(ss_global$par)[1]
scen[s,'FMSY_GLOBAL_A2'] <- exp(ss_global$par)[2]
scen[s,'FMSY_LOCAL'] <- sum(exp(ss_local$par))
scen[s,'MSY_LOCAL'] <- refpts_local['tyield_local']
scen[s,'SBMSY_LOCAL'] <- refpts_local['local_tssb']
scen[s,'A1SB0_LOCAL'] <-  refpts_local['local_tssb0']*refpts_local['req_local_prop']
scen[s,'A2SB0_LOCAL'] <-  refpts_local['local_tssb0']*(1-refpts_local['req_local_prop'])
scen[s,'A1DEPL_LOCAL'] <-  (refpts_local['local_tssb']*refpts_local['req_local_prop'])/  scen[s,'A1SB0_LOCAL']
scen[s,'A2DEPL_LOCAL'] <- (refpts_local['local_tssb']*(1-refpts_local['req_local_prop']))/   scen[s,'A2SB0_LOCAL']
scen[s,'A1SB0_GLOBAL'] <-   refpts_global['global_tssb0']*dat$input_prop
scen[s,'A2SB0_GLOBAL'] <-  refpts_global['global_tssb0']*(1-dat$input_prop)
scen[s,'FMSY_GLOBAL'] <- sum(exp(ss_global$par))
scen[s,'MSY_GLOBAL'] <-  refpts_global['tyield_global']
scen[s,'SBMSY_GLOBAL'] <- refpts_global['global_tssb']
scen[s,'SBMSY_A1_RATIO'] <- refpts_global['global_a1ssb']/refpts_local['local_a1ssb']
scen[s,'SBMSY_A2_RATIO'] <- refpts_global['global_a2ssb']/refpts_local['local_a2ssb']
scen[s,'A1DEPL_GLOBAL'] <- refpts_global['global_tssb']*dat$input_prop/  scen[s,'A1SB0_GLOBAL']
scen[s,'A2DEPL_GLOBAL'] <-  refpts_global['global_tssb']*(1-dat$input_prop)/  scen[s,'A2SB0_GLOBAL']
#
# # #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
global <- data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c() +
scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
geom_point(data = NULL,
aes(x = exp(ss_global$par[1]), y = exp(ss_global$par[2])),
fill = NA, color = 'blue', size = 2, pch =15) +
annotate('text',
x =0.6*maxf1,
y = 0.85*maxf1,
size = 3,
color = 'blue',
label = as.expression(bquote(MSY[Global]~ "="~.(round(refpts_global['tyield_global'],2))))) +
annotate('text',
x =0.6*maxf1,
y = 0.8*maxf1,
size = 3,
color ='blue',
label = as.expression(bquote(F[MSY_Global]~"="~.(round(exp(ss_global$par[1]),2))~"Area 1, "~.(round(exp(ss_global$par[2]),2))~"Area 2"))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
locl <- data.frame(surface[,,'local']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c() +
scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
geom_point(data = NULL,
aes(x = exp(ss_local$par[1]), y = exp(ss_local$par[2])),
fill = NA, color = 'blue', size = 2, pch =15)+
annotate('text',
x =0.6*maxf1,
y = 0.85*maxf1,
size = 3,
color = 'blue',
label = as.expression(bquote(MSY[Local]~ "="~.(round(refpts_local['tyield_local'],2))))) +
annotate('text',
x =0.6*maxf1,
y = 0.8*maxf1,
size = 3,
color ='blue',
label = as.expression(bquote(F[MSY_Local]~"="~.(round(exp(ss_local$par[1]),2))~"Area 1, "~.(round(exp(ss_local$par[2]),2))~"Area 2"))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
## viewing plots in this manner requires the patchwork() package
# locl   | global
#
# #* save -----
filetemp <- here('output',paste0(Sys.Date(),"-h=",paste0(steeps[1],"_",steeps[2]),"-",SCENARIO))
dir.create(filetemp)
ggsave(locl   | global,
file = paste0(filetemp,"/heatmap.png"),
width = 8, height = 6, unit = 'in', dpi = 520)
save(ss_local, file = paste0(filetemp,'/ss_local.RDATA'))
save(ss_global, file = paste0(filetemp,'/ss_global.RDATA'))
save(surface, file = paste0(filetemp,'/surface.RDATA'))
rm(ss_local); rm(ss_global); rm(surface); rm(locl); rm(global)
} ## end s in scen
# make results table ----
data.frame(scen) %>%
mutate(WA = "Linear increasing function; identical between areas") %>%
mutate(
NATM,
'GLOBAL_FMSY_A1' = FMSY_GLOBAL_A1,
'LOCAL_FMSY_A1' = FMSY_LOCAL_A1,
'GLOBAL_FMSY_A2' = FMSY_GLOBAL_A2,
'LOCAL_FMSY_A2'= FMSY_LOCAL_A2,
'GLOBALFMSY' = paste(round(GLOBAL_FMSY_A1,2),round(GLOBAL_FMSY_A2,2), sep = ", "),
'LOCALFMSY' = paste(round(LOCAL_FMSY_A1,2),round(LOCAL_FMSY_A2,2), sep = ", "),
'GLOBAL_F_SUM' = round(GLOBAL_FMSY_A1+GLOBAL_FMSY_A2,2),
'LOCAL_F_SUM' = round(LOCAL_FMSY_A1+LOCAL_FMSY_A2,2),
'MSY_RATIO' =  round(as.numeric(MSY_GLOBAL)/as.numeric(MSY_LOCAL),2),
'GLOBAL_SBMSY' = round(as.numeric(SBMSY_GLOBAL),2),
'LOCAL_SBMSY' = as.numeric(SBMSY_LOCAL),
'SBMSY_RATIO' = round(GLOBAL_SBMSY/LOCAL_SBMSY,2),
'SBMSY_A1_RATIO' = round(as.numeric(SBMSY_A1_RATIO),2),
'SBMSY_A2_RATIO' = round(as.numeric(SBMSY_A2_RATIO),2),
'GLOBAL_SB0' = as.numeric(A1SB0_GLOBAL)+as.numeric(A2SB0_GLOBAL),
'LOCAL_SB0' = as.numeric(A1SB0_LOCAL)+as.numeric(A2SB0_LOCAL),
'GLOBAL_DEPL_TOTAL' = round(GLOBAL_SBMSY/GLOBAL_SB0,2),
'LOCAL_DEPL_TOTAL' = round(LOCAL_SBMSY/LOCAL_SB0,2),
'WAA' = 'Fig. 1K',
'SteepnessH' =  paste(H1,H2,sep = ", "),
'Selectivity' = ifelse(SLX_A50_A1  == 9, 'Fig. 1L',
ifelse(SLX_A50_A1  ==7, "Fig. 2B","Fig. 2C"))) %>%
select('Scenario' = SCENARIO_NAME,
GLOBALFMSY,
LOCALFMSY,
GLOBAL_F_SUM,
LOCAL_F_SUM,
SBMSY_RATIO_TOTAL =SBMSY_RATIO,
# SBMSY_A1_RATIO,
# SBMSY_A2_RATIO,
MSY_RATIO,
GLOBAL_DEPL_TOTAL,
LOCAL_DEPL_TOTAL) %>%
# View()
write.csv(., file = here('output',paste0(Sys.Date(),'-Vignette-results.csv')), row.names = FALSE)
## AEP IDEA - use with src-sink only
doNAA2 <- function(F1,F2, usedat, Sel, Q){
M <- usedat$M
h <- usedat$h
# Q = c(0,0.4)
# Q=NULL
# Q[1] <- 1-max(usedat$dat[,2,1])
# Q[2] <- 1-max(usedat$dat[,2,2])
## run area-specific NAA treating all movement as mortality
Z <- matrix(0,nrow=2,ncol=Nages)
for (Iage in 1:Nages) Z[1,Iage] <- Sel[1,Iage]*F1
for (Iage in 1:Nages) Z[2,Iage] <- Sel[2,Iage]*F2
N <- array(NA, dim = c(narea,Nages,narea))
## assign single recruit to each area
N[,1:2,1] <- c(1,0) #c(dat$input_prop,0)
N[,1:2,2] <- c(0,1) #c(0,1-dat$input_prop)
## survive and move at once
# for(slice in 1:narea){
for(age in 2:Nages){
## Option 1: cheapie version (no move or src-sink dynamic; not symm)
# https://github.com/mkapur/sptlRP/blob/f2ca3bc972a6d00ed2e93e9521b83aaf48c01a88/R/fnxs.R
# N[1,age,1] <- N[1,age-1,1]*exp(-M)*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])
# N[2,age,1] <- N[2,age-1,1]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,1]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- 0
# N[2,age,2] <- N[2,age-1,2]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,2]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
## brute force src-sink method (a2 is sink)
## with fishing coincident to movement (fished in source area)
# N[1,age,1] <- N[1,age-1,1]*exp(-M)*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])+
#   N[2,age-1,1]*exp(-M)*(1-exp(-Sel[2,age-1]*Q[2]))*exp(-(Z[2,age-1]))
# N[2,age,1] <- N[2,age-1,1]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,1]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
# N[1,age,2] <- N[1,age-1,2]*exp(-M)*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])+
#   N[2,age-1,2]*exp(-M)*(1-exp(-Sel[2,age-1]*Q[2]))*exp(-(Z[2,age-1]))
# N[2,age,2] <- N[2,age-1,2]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
#   N[1,age-1,2]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[1,age-1]))
## brute force src-sink method (a2 is sink)
## with fishing AFTER movement (fished in sink area)
N[1,age,1] <- N[1,age-1,1]*exp(-M)*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])+
N[2,age-1,1]*exp(-M)*(1-exp(-Sel[2,age-1]*Q[2]))*exp(-(Z[1,age-1]))
N[2,age,1] <- N[2,age-1,1]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
N[1,age-1,1]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[2,age-1]))
N[1,age,2] <- N[1,age-1,2]*exp(-M)*exp(-(Z[1,age-1]))*exp(-Sel[1,age-1]*Q[1])+
N[2,age-1,2]*exp(-M)*(1-exp(-Sel[2,age-1]*Q[2]))*exp(-(Z[1,age-1]))
N[2,age,2] <- N[2,age-1,2]*exp(-M)*exp(-(Z[2,age-1]))*exp(-Sel[2,age-1]*Q[2])+
N[1,age-1,2]*exp(-M)*(1-exp(-Sel[1,age-1]*Q[1]))*exp(-(Z[2,age-1]))
} ## end ages
for(slice in 1:narea){
for(area in 1:narea){
N[area,Nages,slice] <-    N[area,Nages,slice]/(1-exp(-(Z[area,Nages]+M)))
}}
Zret = Z+M
# cat(N[1,2,1],"\n")
# plot(N)
return(list('N' = N,'Z' = Zret))
}
## packages ----
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2); require(patchwork)
require(reshape2)
require(png);require(grid);require(gridExtra)
# source("fnxs.R")
source(here('R','fnxs.R'))
## run simulations
scen <- read.csv(here("vignette_inputscen.csv")) ## setup
GLOBAL_R0 = 1
# dim(FFs)
## things to track
coln <- c(
"FMSY_GLOBAL_A1",
"FMSY_GLOBAL_A2",
"FMSY_LOCAL_A1",
"FMSY_LOCAL_A2",
"FMSY_LOCAL",
"FMSY_GLOBAL",
"MSY_LOCAL",
"MSY_GLOBAL",
"SBMSY_LOCAL",
"SBMSY_GLOBAL",
"A1SB0_LOCAL",
'A2SB0_LOCAL',
"A1SB0_GLOBAL",
'A2SB0_GLOBAL',
"A1DEPL_LOCAL",
"A1DEPL_GLOBAL",
"A2DEPL_LOCAL",
"A2DEPL_GLOBAL" )
scen <- cbind(scen, setNames( lapply(coln, function(x) x=NA), coln) )
datlist <- list()
## run sims ----
for(s in 1:nrow(scen)){
# for(s in 1:3){
#* build dat ----
SCENARIO = scen[s,'SCENARIO_NAME']
steeps <- c(scen[s,'H1'], scen[s,'H2'])
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = NULL, ## default wa
mort = scen[s,'NATM'],
h = steeps,
input_prop = scen[s,'PROPR'],
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50= c(as.numeric(scen[s,'SLX_A50_A1']),9),
slx_a95= c(as.numeric(scen[s,'SLX_A95_A1']),13),
pStay=pStayt,
qq = c(scen[s,'Q1'],scen[s,'Q2']))
# Q = dat$Q
#print(dat)
datlist[[s]] <- dat
#* build surface ----
FMAX <- scen[s,'FMAX']
FF.vec = seq(0,1.1,0.05)
# FF.vec = seq(0,2.5,0.1)
FFs <- expand.grid(FF.vec,FF.vec)
surface <- array(NA, dim = c(nrow(FFs),7,2),
dimnames = list(c(1:nrow(FFs)),
c("FF_Area1","FF_Area2",'tSSB', 'req','req_prop', 'tSSB0',"tyield"),
c('local','global')))
for(i in 1:nrow(FFs)){
if(i %% 100 ==0) cat(i,"\n")
surface[i,'FF_Area1',] <- FFs[i,1];  surface[i,'FF_Area2',] <- FFs[i,2]
## fill in surface
useFs <- log(as.numeric(c(FFs[i,])))
tyields <-  runSim(par =useFs, dat, ret = 'vals', assume = NA)
surface[i,'tSSB','local'] <- tyields['local_tssb']
surface[i,'tSSB','global'] <-  tyields['global_tssb'] #tyields$global_tssb
surface[i,'tSSB0','local'] <- tyields['local_tssb0'] #tyields$local_tssb0
surface[i,'tSSB0','global'] <- tyields['global_tssb0'] #tyields$global_tssb0
surface[i,'req','local'] <- tyields['req_local'] #tyields$req_local[1]
surface[i,'req_prop','local'] <- tyields['req_local_prop'] #tyields$req_local[1]
surface[i,'req','global'] <- tyields['req_global'] #tyields$req_global
surface[i,'req_prop','global'] <- dat$input_prop
surface[i,'tyield','local'] <- tyields['tyield_local'] #tyields$tyield_local
surface[i,'tyield','global'] <- tyields['tyield_global'] #tyields$tyield_global
} ## end nrow FFs
# #
# data.frame(surface[,,'local']) %>%
#   filter(FF_Area2 == 0.9) %>%
#   ggplot(., aes(x = (FF_Area1), y = tyield)) +
#   geom_point()
#* find MSY ----
upr = log(0.2)
ss_global <- optim(par = log(c(0.27,0.27)),
dat= dat,
assume = 'GLOBAL',
ret = 'optim',
fn=runSim,
# method = 'L-BFGS-B', lower = -Inf, upper =upr,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
# cat( round(exp(ss_global$par),2),"\n")
for(k in 1:5){
ss_global <- optim(par = ss_global$par,
dat= dat,
assume = 'GLOBAL',
ret = 'optim',
fn=runSim,
# method = 'L-BFGS-B', lower = -Inf, upper =upr,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
# cat( round(exp(ss_global$par),2),"\n")
}
cat(SCENARIO,"\n")
# cat(dat$h,"\n")
cat( round(exp(ss_global$par),2),"\n")
# start <-  if(s != 5)   log(c(0.1,0.5)) else(ss_global$par)
# start =  log(c(0.1,0.5))
# start = ss_global$par
# if(s ==  4) start =  log(c(0.01,0.5))
# upr = ifelse(s == 5 ,log(0.65), ifelse(s == 4, log(0.55), log(1)))
start = ss_global$par
if(s ==  3) start =  log(c(0.005,0.595))
if(s ==  2) start =  log(c(0.15,0.45))
if(s >= 10) start =  log(c(0.27,0.27))
upr = ifelse(s <= 2, log(0.5),ifelse(s == 3, log(0.59),ifelse(s >9, log(0.29), log(0.61))))
# upr = log(0.59)
ss_local <- optim(par = start,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
method = 'L-BFGS-B', lower = -Inf, upper =upr,
control = list(
maxit = 100000,
ndeps = rep(1e-4,2)))
cat( round(exp(ss_local$par),2),"\n")
for(k in 1:5){
## save time if stabilized
# if(all(round(exp(ss_local$par),2) == round(exp(ss_global$par),2))) next()
ss_local <- optim(par = ss_local$par,
dat= dat,
assume = 'LOCAL',
ret = 'optim',
fn=runSim,
method = 'L-BFGS-B', lower = -Inf, upper = upr,
control = list(
maxit = 1000,
ndeps = rep(1e-4,2)))
cat( round(exp(ss_local$par),2),"\n")
}
cat( round(exp(ss_local$par),2),"\n")
cat( round(sum(exp(ss_local$par)),2),"\n")
# dat$h = c(0.6,0.8)
# tt <- runSim(par = log(c(0.45,0.45)), dat, ret = 'vals', assume = NA);tt
# tt <- runSim(par = c(-1000,-1000), dat, ret = 'vals', assume = NA)
# tt['req_local']*c(tt['req_local_prop'],1-tt['req_local_prop'])
refpts_local <-  runSim(par =ss_local$par,dat, ret = 'vals', assume = NA)
refpts_global <-  runSim(par =ss_global$par,dat, ret = 'vals', assume = NA)
# cat(refpts_local['req_local_prop'],"\n")
#* fill scen----
scen[s,'FMSY_LOCAL_A1'] <- exp(ss_local$par)[1]
scen[s,'FMSY_LOCAL_A2'] <- exp(ss_local$par)[2]
scen[s,'FMSY_GLOBAL_A1'] <-exp(ss_global$par)[1]
scen[s,'FMSY_GLOBAL_A2'] <- exp(ss_global$par)[2]
scen[s,'FMSY_LOCAL'] <- sum(exp(ss_local$par))
scen[s,'MSY_LOCAL'] <- refpts_local['tyield_local']
scen[s,'SBMSY_LOCAL'] <- refpts_local['local_tssb']
scen[s,'A1SB0_LOCAL'] <-  refpts_local['local_tssb0']*refpts_local['req_local_prop']
scen[s,'A2SB0_LOCAL'] <-  refpts_local['local_tssb0']*(1-refpts_local['req_local_prop'])
scen[s,'A1DEPL_LOCAL'] <-  (refpts_local['local_tssb']*refpts_local['req_local_prop'])/  scen[s,'A1SB0_LOCAL']
scen[s,'A2DEPL_LOCAL'] <- (refpts_local['local_tssb']*(1-refpts_local['req_local_prop']))/   scen[s,'A2SB0_LOCAL']
scen[s,'A1SB0_GLOBAL'] <-   refpts_global['global_tssb0']*dat$input_prop
scen[s,'A2SB0_GLOBAL'] <-  refpts_global['global_tssb0']*(1-dat$input_prop)
scen[s,'FMSY_GLOBAL'] <- sum(exp(ss_global$par))
scen[s,'MSY_GLOBAL'] <-  refpts_global['tyield_global']
scen[s,'SBMSY_GLOBAL'] <- refpts_global['global_tssb']
scen[s,'SBMSY_A1_RATIO'] <- refpts_global['global_a1ssb']/refpts_local['local_a1ssb']
scen[s,'SBMSY_A2_RATIO'] <- refpts_global['global_a2ssb']/refpts_local['local_a2ssb']
scen[s,'A1DEPL_GLOBAL'] <- refpts_global['global_tssb']*dat$input_prop/  scen[s,'A1SB0_GLOBAL']
scen[s,'A2DEPL_GLOBAL'] <-  refpts_global['global_tssb']*(1-dat$input_prop)/  scen[s,'A2SB0_GLOBAL']
#
# # #* plotting ----
maxf1 <- max(data.frame(surface[,"FF_Area1",'global']))
global <- data.frame(surface[,,'global']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c() +
scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
geom_point(data = NULL,
aes(x = exp(ss_global$par[1]), y = exp(ss_global$par[2])),
fill = NA, color = 'blue', size = 2, pch =15) +
annotate('text',
x =0.6*maxf1,
y = 0.85*maxf1,
size = 3,
color = 'blue',
label = as.expression(bquote(MSY[Global]~ "="~.(round(refpts_global['tyield_global'],2))))) +
annotate('text',
x =0.6*maxf1,
y = 0.8*maxf1,
size = 3,
color ='blue',
label = as.expression(bquote(F[MSY_Global]~"="~.(round(exp(ss_global$par[1]),2))~"Area 1, "~.(round(exp(ss_global$par[2]),2))~"Area 2"))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
locl <- data.frame(surface[,,'local']) %>%
filter(FF_Area1 <= maxf1 & FF_Area2 <= maxf1) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = tyield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top')+
scale_fill_viridis_c() +
scale_x_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
scale_y_continuous(limits = c(NA,maxf1), breaks = seq(0,maxf1, 0.25), expand = c(0,0)) +
geom_point(data = NULL,
aes(x = exp(ss_local$par[1]), y = exp(ss_local$par[2])),
fill = NA, color = 'blue', size = 2, pch =15)+
annotate('text',
x =0.6*maxf1,
y = 0.85*maxf1,
size = 3,
color = 'blue',
label = as.expression(bquote(MSY[Local]~ "="~.(round(refpts_local['tyield_local'],2))))) +
annotate('text',
x =0.6*maxf1,
y = 0.8*maxf1,
size = 3,
color ='blue',
label = as.expression(bquote(F[MSY_Local]~"="~.(round(exp(ss_local$par[1]),2))~"Area 1, "~.(round(exp(ss_local$par[2]),2))~"Area 2"))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield',  title = SCENARIO)
## viewing plots in this manner requires the patchwork() package
# locl   | global
#
# #* save -----
filetemp <- here('output',paste0(Sys.Date(),"-h=",paste0(steeps[1],"_",steeps[2]),"-",SCENARIO))
dir.create(filetemp)
ggsave(locl   | global,
file = paste0(filetemp,"/heatmap.png"),
width = 8, height = 6, unit = 'in', dpi = 520)
save(ss_local, file = paste0(filetemp,'/ss_local.RDATA'))
save(ss_global, file = paste0(filetemp,'/ss_global.RDATA'))
save(surface, file = paste0(filetemp,'/surface.RDATA'))
rm(ss_local); rm(ss_global); rm(surface); rm(locl); rm(global)
} ## end s in scen
# make results table ----
data.frame(scen) %>%
mutate(WA = "Linear increasing function; identical between areas") %>%
mutate(
NATM,
'GLOBAL_FMSY_A1' = FMSY_GLOBAL_A1,
'LOCAL_FMSY_A1' = FMSY_LOCAL_A1,
'GLOBAL_FMSY_A2' = FMSY_GLOBAL_A2,
'LOCAL_FMSY_A2'= FMSY_LOCAL_A2,
'GLOBALFMSY' = paste(round(GLOBAL_FMSY_A1,2),round(GLOBAL_FMSY_A2,2), sep = ", "),
'LOCALFMSY' = paste(round(LOCAL_FMSY_A1,2),round(LOCAL_FMSY_A2,2), sep = ", "),
# 'GLOBAL_F_SUM' = round(GLOBAL_FMSY_A1+GLOBAL_FMSY_A2,2),
'LOCAL_F_SUM' = round(LOCAL_FMSY_A1+LOCAL_FMSY_A2,2),
'MSY_RATIO' =  round(as.numeric(MSY_GLOBAL)/as.numeric(MSY_LOCAL),2),
'GLOBAL_SBMSY' = round(as.numeric(SBMSY_GLOBAL),2),
'LOCAL_SBMSY' = as.numeric(SBMSY_LOCAL),
'SBMSY_RATIO' = round(GLOBAL_SBMSY/LOCAL_SBMSY,2),
'SBMSY_A1_RATIO' = round(as.numeric(SBMSY_A1_RATIO),2),
'SBMSY_A2_RATIO' = round(as.numeric(SBMSY_A2_RATIO),2),
'GLOBAL_SB0' = as.numeric(A1SB0_GLOBAL)+as.numeric(A2SB0_GLOBAL),
'LOCAL_SB0' = as.numeric(A1SB0_LOCAL)+as.numeric(A2SB0_LOCAL),
'GLOBAL_DEPL_TOTAL' = round(GLOBAL_SBMSY/GLOBAL_SB0,2),
'LOCAL_DEPL_TOTAL' = round(LOCAL_SBMSY/LOCAL_SB0,2),
'WAA' = 'Fig. 1K',
'SteepnessH' =  paste(H1,H2,sep = ", "),
'Selectivity' = ifelse(SLX_A50_A1  == 9, 'Fig. 1L',
ifelse(SLX_A50_A1  ==7, "Fig. 2B","Fig. 2C"))) %>%
select('Scenario' = SCENARIO_NAME,
GLOBALFMSY,
LOCALFMSY,
GLOBAL_F_SUM,
LOCAL_F_SUM,
SBMSY_RATIO_TOTAL =SBMSY_RATIO,
# SBMSY_A1_RATIO,
# SBMSY_A2_RATIO,
MSY_RATIO,
GLOBAL_DEPL_TOTAL,
LOCAL_DEPL_TOTAL) %>%
# View()
write.csv(., file = here('output',paste0(Sys.Date(),'-Vignette-results.csv')), row.names = FALSE)
# make results table ----
data.frame(scen) %>%
mutate(WA = "Linear increasing function; identical between areas") %>%
mutate(
NATM,
'GLOBAL_FMSY_A1' = FMSY_GLOBAL_A1,
'LOCAL_FMSY_A1' = FMSY_LOCAL_A1,
'GLOBAL_FMSY_A2' = FMSY_GLOBAL_A2,
'LOCAL_FMSY_A2'= FMSY_LOCAL_A2,
'GLOBALFMSY' = paste(round(GLOBAL_FMSY_A1,2),round(GLOBAL_FMSY_A2,2), sep = ", "),
'LOCALFMSY' = paste(round(LOCAL_FMSY_A1,2),round(LOCAL_FMSY_A2,2), sep = ", "),
# 'GLOBAL_F_SUM' = round(GLOBAL_FMSY_A1+GLOBAL_FMSY_A2,2),
'LOCAL_F_SUM' = round(LOCAL_FMSY_A1+LOCAL_FMSY_A2,2),
'MSY_RATIO' =  round(as.numeric(MSY_GLOBAL)/as.numeric(MSY_LOCAL),2),
'GLOBAL_SBMSY' = round(as.numeric(SBMSY_GLOBAL),2),
'LOCAL_SBMSY' = as.numeric(SBMSY_LOCAL),
'SBMSY_RATIO' = round(GLOBAL_SBMSY/LOCAL_SBMSY,2),
'SBMSY_A1_RATIO' = round(as.numeric(SBMSY_A1_RATIO),2),
'SBMSY_A2_RATIO' = round(as.numeric(SBMSY_A2_RATIO),2),
'GLOBAL_SB0' = as.numeric(A1SB0_GLOBAL)+as.numeric(A2SB0_GLOBAL),
'LOCAL_SB0' = as.numeric(A1SB0_LOCAL)+as.numeric(A2SB0_LOCAL),
'GLOBAL_DEPL_TOTAL' = round(GLOBAL_SBMSY/GLOBAL_SB0,2),
'LOCAL_DEPL_TOTAL' = round(LOCAL_SBMSY/LOCAL_SB0,2),
'WAA' = 'Fig. 1K',
'SteepnessH' =  paste(H1,H2,sep = ", "),
'Selectivity' = ifelse(SLX_A50_A1  == 9, 'Fig. 1L',
ifelse(SLX_A50_A1  ==7, "Fig. 2B","Fig. 2C"))) %>%
select('Scenario' = SCENARIO_NAME,
GLOBALFMSY,
LOCALFMSY,
# GLOBAL_F_SUM,
LOCAL_F_SUM,
SBMSY_RATIO_TOTAL =SBMSY_RATIO,
# SBMSY_A1_RATIO,
# SBMSY_A2_RATIO,
MSY_RATIO,
GLOBAL_DEPL_TOTAL,
LOCAL_DEPL_TOTAL) %>%
# View()
write.csv(., file = here('output',paste0(Sys.Date(),'-Vignette-results.csv')), row.names = FALSE)
