rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
## matrix of scnearios, including name
scen <- matrix(NA, nrow = 5, ncol =5)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2') ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <- c('symmetric_move','just_move','lower_slx','move_slx_lo','move_slx_hi') ## scen 3 is AAF
scen[,'SLX_A50_A1'] <- c(9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(0.5,0.9,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(0.5,0.6,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
s = 2
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
source(here("R","fnxs.R"))
setwd("C:/Users/mkapur/Dropbox/UW/sptlRP")
source(here("R","fnxs.R"))
require(here)
source(here("R","fnxs.R"))
here
here()
## Spatial reference points for next-gen assessment models
rm(list = ls())
require(dplyr)
require(here)
require(ggplot2);require(ggsidekick);require(patchwork)
require(reshape2)
source(here("R","fnxs.R"))
## settings, unchanged
R0_global <- 4
Rprop_input <- 0.65
steep = c(0.7,0.7)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2') ## scenarios are defined by differeniating
## matrix of scnearios, including name
scen <- matrix(NA, nrow = 5, ncol =5)
scen[,'SCENARIO_NAME'] <- c('symmetric_move','just_move','lower_slx','move_slx_lo','move_slx_hi') ## scen 3 is AAF
scen[,'SLX_A50_A1'] <- c(9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(0.5,0.9,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(0.5,0.6,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
## matrix of scnearios, including name
scen <- matrix(NA, nrow = 5, ncol =5)
colnames(scen) <- c("SCENARIO_NAME",'SLX_A50_A1','SLX_A95_A1','PSTAY_A1','PSTAY_A2') ## scenarios are defined by differeniating
scen[,'SCENARIO_NAME'] <- c('symmetric_move','just_move','lower_slx','move_slx_lo','move_slx_hi') ## scen 3 is AAF
scen[,'SLX_A50_A1'] <- c(9,9,7,7,11) ## lower slx when different
scen[,'SLX_A95_A1'] <- c(13,13,11,11,15) ## lower slx when different
scen[,'PSTAY_A1'] <- c(0.5,0.9,0.5,0.9,0.9)
scen[,'PSTAY_A2'] <- c(0.5,0.6,0.5,0.6,0.6)
scen[,2:ncol(scen)] <- as.numeric(scen[,2:ncol(scen)])
s = 2
SCENARIO <- scen[s,'SCENARIO_NAME']
slx_a50t <- as.numeric(c(scen[s,'SLX_A50_A1'],9))
slx_a95t <- as.numeric(c(scen[s,'SLX_A95_A1'],13))
pStayt <- as.numeric(c(scen[s,'PSTAY_A1'],scen[s,'PSTAY_A2']))
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
steep
head(out)
bh <- function(h, prop, r0, b0, bcurr,narea = 2){
rec = NULL
for(i in 1:narea){
num <- prop*4*h[i]*r0*bcurr$SB_A1/b0$SB_A1
# cat(num, "\n")
denom1 <- bcurr$SB_A1/b0$SB_A1*(5*h[i]-1)
# cat(denom1,"\n")
denom2 <- (1-h[i])
# cat(denom2,"\n")
rec[i] = num/(denom1+denom2)
#
}
cat(rec,"\n")
return(rec)
}
u
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
## calls from global environment to optimize
getMSY <- function(){
# https://stackoverflow.com/questions/57173162/function-for-uniroot-that-has-two-parameters-that-need-to-be-run-across-a-vector
## the example above actually has 3 pars and he optimizes over 2 known vectors
## the mapply will return the best F value given proportion
## inside dfx.dxSYS_new we run optim and use passed R, Rprop
## need a second version of this which uses global R, rprop
FpropVec <- seq(0.01,1,0.01) ## all possible proportions of F in Area 1
fbest_new <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_new,
interval = c(0.02,1),
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed 2d optimization (new method) \n')
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval = c(0.02,1),
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed global optimization (old method) \n')
propmsy <- data.frame('Fprop' = FpropVec,
'FMSY_new' = matrix(unlist(fbest_new)),
'FMSY_global' = matrix(unlist(fbest_global)))
return(propmsy)
}
propmsytemp <- getMSY()
## calls from global environment to optimize
getMSY <- function(){
# https://stackoverflow.com/questions/57173162/function-for-uniroot-that-has-two-parameters-that-need-to-be-run-across-a-vector
## the example above actually has 3 pars and he optimizes over 2 known vectors
## the mapply will return the best F value given proportion
## inside dfx.dxSYS_new we run optim and use passed R, Rprop
## need a second version of this which uses global R, rprop
FpropVec <- seq(0.01,1,0.01) ## all possible proportions of F in Area 1
fbest_new <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_new,
interval = c(0.02,5),
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed 2d optimization (new method) \n')
fbest_global  <-
mapply(
function(Fv_prop)
uniroot(f = dfx.dxSYS_global,
interval = c(0.02,5),
Fv_prop = Fv_prop)[1],
FpropVec)
cat('performed global optimization (old method) \n')
propmsy <- data.frame('Fprop' = FpropVec,
'FMSY_new' = matrix(unlist(fbest_new)),
'FMSY_global' = matrix(unlist(fbest_global)))
return(propmsy)
}
bh <- function(h, prop, r0, b0, bcurr,narea = 2){
rec = NULL
# for(i in 1:narea){
#   num <- prop*4*h[i]*r0*bcurr$SB_A1/b0$SB_A1
#   # cat(num, "\n")
#   denom1 <- bcurr$SB_A1/b0$SB_A1*(5*h[i]-1)
#   # cat(denom1,"\n")
#   denom2 <- (1-h[i])
#   # cat(denom2,"\n")
#   rec[i] = num/(denom1+denom2)
# }
for(i in 1:narea){
num <- prop*4*h[1]*r0*bcurr$SB_A1/b0$SB_A1
# cat(num, "\n")
denom1 <- bcurr$SB_A1/b0$SB_A1*(5*h[1]-1)
# cat(denom1,"\n")
denom2 <- (1-h[1])
# cat(denom2,"\n")
rec[i] = num/(denom1+denom2)
}
cat(rec,"\n")
return(rec)
}
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
head(out2)
pStayt = c(0.6,0.4)
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
out2
which.max(out2$tyield)
head(out2)
out2[which.max(out2$tyield)]
out2[which.max(out2$tyield),]
out2 = data.frame(out2)
out2[which.max(out2$tyield),]
out2 <- makeOut2(propmsy=propmsytemp)
out2 = data.frame(out2[,,1])
out2[which.max(out2$tyield),]
pStayt
#            color ='purple',
#            label = as.expression(bquote(F[MSY_Total]~"="~.(round(out_use2[which.max(out_use2$tyield),'FMSY'],2))))) +
#   labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
#
#
#
# FSB |FYIELD
# ggsave(last_plot(),
#        height = 10, width = 8, dpi = 520,
#        file = here('figs',paste0(Sys.Date(),"-FvsSBandYield_Total.png")))
out2_new <- data.frame(out2[,,'new'])
# out2_new[out2_new < 0] <- 0
out2_global <- data.frame(out2[,,'old'])
out_use <- data.frame(out[,,'new'])
# out_use[out_use < 0] <- 0
new <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top') +
# scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = expansion(add = c(0, 0)), limits = c(0,1)) +
scale_x_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY from new method
geom_point(data = out2_new, aes(x = FF_Area1, y = FF_Area2),
fill = NA,
size = 2, alpha = 0.3) +
geom_point(data = out2_new, aes(x = out2_new[which.max(out2_new[,'tyield']),'FF_Area1'],
y = out2_new[which.max(out2_new[,'tyield']),'FF_Area2']),
fill = NA, color = 'purple', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.13,
size = 3,
color = 'purple',
label = as.expression(bquote(MSY[Optim]~
"="~.(round(out2_new[which.max(out2_new[,'tyield']),
'tyield']))))) +
annotate('text',
x = 0.8,
y = 0.15,
size = 3,
color ='purple',
label = as.expression(bquote(F[MSY_Optim]~"="~.
(round(out2_new[which.max(out2_new$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
out2 <- makeOut2(propmsy=propmsytemp)
out2_new <- data.frame(out2[,,'new'])
# out2_new[out2_new < 0] <- 0
out2_global <- data.frame(out2[,,'old'])
# out2_global[out2_global < 0] <- 0
out_use <- data.frame(out[,,'new'])
# out_use[out_use < 0] <- 0
new <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top') +
# scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = expansion(add = c(0, 0)), limits = c(0,1)) +
scale_x_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY from new method
geom_point(data = out2_new, aes(x = FF_Area1, y = FF_Area2),
fill = NA,
size = 2, alpha = 0.3) +
geom_point(data = out2_new, aes(x = out2_new[which.max(out2_new[,'tyield']),'FF_Area1'],
y = out2_new[which.max(out2_new[,'tyield']),'FF_Area2']),
fill = NA, color = 'purple', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.13,
size = 3,
color = 'purple',
label = as.expression(bquote(MSY[Optim]~
"="~.(round(out2_new[which.max(out2_new[,'tyield']),
'tyield']))))) +
annotate('text',
x = 0.8,
y = 0.15,
size = 3,
color ='purple',
label = as.expression(bquote(F[MSY_Optim]~"="~.
(round(out2_new[which.max(out2_new$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
new
pStay
pStayt
head(dat)
pStayt = c(0.7,0.4)
dat <- makeDat(wa = c(5,5),
fec_a50 = c(6,6),
fec_a95 = c(12,12),
slx_a50=slx_a50t,
slx_a95=slx_a95t,
pStay=pStayt)
FFs <- expand.grid(seq(0,1,0.05),seq(0,1,0.05))
out <- makeOut(dat, FFs)
propmsytemp <- getMSY()
out2 <- makeOut2(propmsy=propmsytemp)
#        file = here('figs',paste0(Sys.Date(),"-FvsSBandYield_Total.png")))
out2_new <- data.frame(out2[,,'new'])
# out2_new[out2_new < 0] <- 0
out2_global <- data.frame(out2[,,'old'])
# out2_global[out2_global < 0] <- 0
out_use <- data.frame(out[,,'new'])
# out_use[out_use < 0] <- 0
new <- out_use %>%
select(FF_Area1,FF_Area2, Yield_Total =tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
# mutate(Area = substr(variable,7,8), yield = value) %>%
mutate(yield = value) %>%
select(-variable,-value) %>%
ggplot(., aes(x = FF_Area1, y = FF_Area2, fill = yield)) +
geom_tile() +
coord_equal() +
ggsidekick::theme_sleek() +
theme(legend.position = 'top') +
# scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = expansion(add = c(0, 0)), limits = c(0,1)) +
scale_x_continuous(expand = c(0,0)) +
scale_fill_viridis_c(option = 'magma',na.value = 'white') +
scale_color_viridis_c(option = 'magma',na.value = 'white') +
## add the locations of FMSY from new method
geom_point(data = out2_new, aes(x = FF_Area1, y = FF_Area2),
fill = NA,
size = 2, alpha = 0.3) +
geom_point(data = out2_new, aes(x = out2_new[which.max(out2_new[,'tyield']),'FF_Area1'],
y = out2_new[which.max(out2_new[,'tyield']),'FF_Area2']),
fill = NA, color = 'purple', size = 2, pch =15)+
annotate('text',
x = 0.8,
y = 0.13,
size = 3,
color = 'purple',
label = as.expression(bquote(MSY[Optim]~
"="~.(round(out2_new[which.max(out2_new[,'tyield']),
'tyield']))))) +
annotate('text',
x = 0.8,
y = 0.15,
size = 3,
color ='purple',
label = as.expression(bquote(F[MSY_Optim]~"="~.
(round(out2_new[which.max(out2_new$tyield),'FMSY'],2))))) +
labs(x = 'F in Area 1',   y = 'F in Area 2', fill = 'Total Yield')
new
pStayt
iso1 <- out[,,'new'] %>% data.frame() %>%
# filter(FF_Area2== 0.5) %>%
# select(Yield_A1 )%>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
## give me the F value at which max yield is obtained
which.max
ggplot(data = iso1, aes(y = yield)) +
geom_line(aes(x = FF_Area1, color = FF_Area2, group = FF_Area2), lwd = 1.1) +
# geom_line(data = iso2, aes(x = FF_Area2, color = FF_Area1, group = FF_Area1), lwd = 1.1) +
ggsidekick::theme_sleek() +
# scale_x_continuous(expand = c(0,0), limits = c(0,2)) +
# scale_y_continuous(expand = c(0,0), limits = c(0,100)) +
# scale_color_manual(values = c('grey44','purple'), labels = c('Area 1','Area 2')) +
labs(x = 'F in Area 1', title = 'Yield Isoclines by Area',
# subtitle = 'Alternative Area F = 0.05; removed runs with any negative yield',
y = 'Yield Total', color = 'F in Area 2 (isocline)') +
geom_vline( data= iso1,
aes(  xintercept  = out2_new[which.max(out2_new[,'tyield']),'FF_Area1'])) +
facet_wrap(~FF_Area2)
iso1 <- out[,,'new'] %>% data.frame() %>%
# filter(FF_Area2== 0.5) %>%
# select(Yield_A1 )%>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value) %>%
## give me the F value at which max yield is obtained
which.max
iso1 <- out[,,'new'] %>% data.frame() %>%
# filter(FF_Area2== 0.5) %>%
# select(Yield_A1 )%>%
select(FF_Area1,FF_Area2,tyield) %>%
reshape2::melt(id = c("FF_Area1","FF_Area2")) %>%
mutate(Area = substr(variable,7,8), yield = value) %>%
select(-variable,-value)
ggplot(data = iso1, aes(y = yield)) +
geom_line(aes(x = FF_Area1, color = FF_Area2, group = FF_Area2), lwd = 1.1) +
# geom_line(data = iso2, aes(x = FF_Area2, color = FF_Area1, group = FF_Area1), lwd = 1.1) +
ggsidekick::theme_sleek() +
# scale_x_continuous(expand = c(0,0), limits = c(0,2)) +
# scale_y_continuous(expand = c(0,0), limits = c(0,100)) +
# scale_color_manual(values = c('grey44','purple'), labels = c('Area 1','Area 2')) +
labs(x = 'F in Area 1', title = 'Yield Isoclines by Area',
# subtitle = 'Alternative Area F = 0.05; removed runs with any negative yield',
y = 'Yield Total', color = 'F in Area 2 (isocline)') +
geom_vline( data= iso1,
aes(  xintercept  = out2_new[which.max(out2_new[,'tyield']),'FF_Area1'])) +
facet_wrap(~FF_Area2)
pStayt
head(out2[,,'new'])
out2[,,'new'] %>% data.frame() %>%
select(FMSY = F_Sys,
FF_Area1 = F_A1,
FF_Area2 = F_A2,
Yield_A1 = Y_A1 ,
Yield_A2= Y_A2 ,
tyield = Y_Sys
) %>%
melt()
out2[,,'new'] %>%
data.frame() %>%
select(F_Sys= FMSY  ,
F_A1= FF_Area1  ,
F_A2=FF_Area2  ,
Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield
) %>%
melt()
out2[,,'new'] %>%
data.frame() %>%
select(F_Sys= FMSY  ,
F_A1= FF_Area1  ,
F_A2=FF_Area2  ,
Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield
) %>%
melt() %>%
mutate(area = substr(variable,3,5))
out2[,,'new'] %>%
data.frame() %>%
select(  Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield   ) %>%
melt()
merge(out2[,,'new'] %>%
data.frame() %>%
select(F_Sys= FMSY  ,
F_A1= FF_Area1  ,
F_A2=FF_Area2   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
out2[,,'new'] %>%
data.frame() %>%
select(  Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
by = 'area')
merge(out2[,,'new'] %>%
data.frame() %>%
select(F_Sys= FMSY  ,
F_A1= FF_Area1  ,
F_A2=FF_Area2   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
out2[,,'new'] %>%
data.frame() %>%
select(  Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
by = 'area') %>%
select(area, FF = value.x, Yield = value.y) %>%
ggplot(., aes(x = FF, y = Yield, group = area )) +
geom_line()
merge(out2[,,'new'] %>%
data.frame() %>%
select(F_Sys= FMSY  ,
F_A1= FF_Area1  ,
F_A2=FF_Area2   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
out2[,,'new'] %>%
data.frame() %>%
select(  Y_A1=Yield_A1   ,
Y_A2= Yield_A2 ,
Y_Sys= tyield   ) %>%
melt() %>%
mutate(area = substr(variable,3,5)) ,
by = 'area', all = FALSE) %>%
select(area, FF = value.x, Yield = value.y) %>%
ggplot(., aes(x = FF, y = Yield, group = area )) +
geom_line()
out2
